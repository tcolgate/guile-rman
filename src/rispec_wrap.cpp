/* -*- buffer-read-only: t -*- vi: set ro: */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : GUILE */

#define SWIG_GUILE_INIT_STATIC static
extern "C" {

SWIG_GUILE_INIT_STATIC void
SWIG_init (void);

}

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * guile_scm_run.swg
 * ----------------------------------------------------------------------------- */

#include <libguile.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef SCM (*swig_guile_proc)();
typedef SCM (*guile_destructor)(SCM);

typedef struct swig_guile_clientdata {
  guile_destructor destroy;
  SCM goops_class;
} swig_guile_clientdata;

#define SWIG_scm2str(s) \
  SWIG_Guile_scm2newstr(s, NULL)
#define SWIG_malloc(size) \
  SCM_MUST_MALLOC(size)
#define SWIG_free(mem) \
  scm_must_free(mem)
#define SWIG_ConvertPtr(s, result, type, flags) \
  SWIG_Guile_ConvertPtr(s, result, type, flags)
#define SWIG_MustGetPtr(s, type, argnum, flags) \
  SWIG_Guile_MustGetPtr(s, type, argnum, flags, FUNC_NAME)
#define SWIG_NewPointerObj(ptr, type, owner) \
  SWIG_Guile_NewPointerObj((void*)ptr, type, owner)
#define SWIG_PointerAddress(object) \
  SWIG_Guile_PointerAddress(object)
#define SWIG_PointerType(object) \
  SWIG_Guile_PointerType(object)
#define SWIG_IsPointerOfType(object, type) \
  SWIG_Guile_IsPointerOfType(object, type)
#define SWIG_IsPointer(object) \
  SWIG_Guile_IsPointer(object)
#define SWIG_contract_assert(expr, msg)				\
  if (!(expr))							\
    scm_error(scm_str2symbol("swig-contract-assertion-failed"),	\
	      (char *) FUNC_NAME, (char *) msg,			\
	      SCM_EOL, SCM_BOOL_F); else

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty) \
  SWIG_Guile_ConvertMember(obj, ptr, sz, ty, FUNC_NAME)
#define SWIG_NewMemberObj(ptr, sz, type) \
  SWIG_Guile_NewMemberObj(ptr, sz, type, FUNC_NAME)
  
/* Runtime API */
static swig_module_info *SWIG_Guile_GetModule(void);
#define SWIG_GetModule(clientdata) SWIG_Guile_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Guile_SetModule(pointer)
  
SWIGINTERN char *
SWIG_Guile_scm2newstr(SCM str, size_t *len) {
#define FUNC_NAME "SWIG_Guile_scm2newstr"
  char *ret;
  size_t l;

  SCM_ASSERT (SCM_STRINGP(str), str, 1, FUNC_NAME);
  
  l = SCM_STRING_LENGTH(str);
  ret = (char *) SWIG_malloc( (l + 1) * sizeof(char));
  if (!ret) return NULL;

  memcpy(ret, SCM_STRING_CHARS(str), l);
  ret[l] = '\0';
  if (len) *len = l;
  return ret;
#undef FUNC_NAME
}

static int swig_initialized = 0;
static scm_t_bits swig_tag = 0;
static scm_t_bits swig_collectable_tag = 0;
static scm_t_bits swig_destroyed_tag = 0;
static scm_t_bits swig_member_function_tag = 0;
static SCM swig_make_func = SCM_EOL;
static SCM swig_keyword = SCM_EOL;
static SCM swig_symbol = SCM_EOL;

#define SWIG_Guile_GetSmob(x) \
  ( SCM_NNULLP(x) && SCM_INSTANCEP(x) && SCM_NFALSEP(scm_slot_exists_p(x, swig_symbol)) \
      ? scm_slot_ref(x, swig_symbol) : (x) )

SWIGINTERN SCM
SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner)
{
  if (ptr == NULL)
    return SCM_EOL;
  else {
    SCM smob;
    swig_guile_clientdata *cdata = (swig_guile_clientdata *) type->clientdata;
    if (owner)
      SCM_NEWSMOB2(smob, swig_collectable_tag, ptr, (void *) type);
    else
      SCM_NEWSMOB2(smob, swig_tag, ptr, (void *) type);

    if (!cdata || SCM_NULLP(cdata->goops_class) || swig_make_func == SCM_EOL ) {
      return smob;
    } else {
      /* the scm_make() C function only handles the creation of gf,
	 methods and classes (no instances) the (make ...) function is
	 later redefined in goops.scm.  So we need to call that
	 Scheme function. */
      return scm_apply(swig_make_func,
		       scm_list_3(cdata->goops_class,
				  swig_keyword,
				  smob),
		       SCM_EOL);
    }
  }
}

SWIGINTERN unsigned long
SWIG_Guile_PointerAddress(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return 0;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (unsigned long) (void *) SCM_CELL_WORD_1(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerAddress", 1, object);
}

SWIGINTERN swig_type_info *
SWIG_Guile_PointerType(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return NULL;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (swig_type_info *) SCM_CELL_WORD_2(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerType", 1, object);
}
  
SWIGINTERN int
SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags)
{
  swig_cast_info *cast;
  swig_type_info *from;
  SCM smob = SWIG_Guile_GetSmob(s);

  if (SCM_NULLP(smob)) {
    *result = NULL;
    return SWIG_OK;
  } else if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
    /* we do not accept smobs representing destroyed pointers */
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (cast) {
        int newmemory = 0;
        *result = SWIG_TypeCast(cast, (void *) SCM_CELL_WORD_1(smob), &newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
        return SWIG_OK;
      } else {
        return SWIG_ERROR;
      }
    } else {
      *result = (void *) SCM_CELL_WORD_1(smob);
      return SWIG_OK;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERNINLINE void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, int flags, const char *func_name)
{
  void *result;
  int res = SWIG_Guile_ConvertPtr(s, &result, type, flags);
  if (!SWIG_IsOK(res)) {
    /* type mismatch */
    scm_wrong_type_arg((char *) func_name, argnum, s);
  }
  return result;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointerOfType (SCM s, swig_type_info *type)
{
  void *result;
  if (SWIG_Guile_ConvertPtr(s, &result, type, 0)) {
    /* type mismatch */
    return 0;
  }
  else return 1;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointer (SCM s)
{
  /* module might not be initialized yet, so initialize it */
  SWIG_Guile_GetModule();
  return SWIG_Guile_IsPointerOfType (s, NULL);
}

/* Mark a pointer object non-collectable */
SWIGINTERN void
SWIG_Guile_MarkPointerNoncollectable(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Mark a pointer object destroyed */
SWIGINTERN void
SWIG_Guile_MarkPointerDestroyed(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_destroyed_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Member functions */

SWIGINTERN SCM
SWIG_Guile_NewMemberObj(void *ptr, size_t sz, swig_type_info *type,
			const char *func_name)
{
  SCM smob;
  void *copy = malloc(sz);
  memcpy(copy, ptr, sz);
  SCM_NEWSMOB2(smob, swig_member_function_tag, copy, (void *) type);
  return smob;
}

SWIGINTERN int
SWIG_Guile_ConvertMember(SCM smob, void *ptr, size_t sz, swig_type_info *type,
			 const char *func_name)
{
  swig_cast_info *cast;
  swig_type_info *from;

  if (SCM_SMOB_PREDICATE(swig_member_function_tag, smob)) {
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (!cast) return SWIG_ERROR;
    }
    memcpy(ptr, (void *) SCM_CELL_WORD_1(smob), sz);
    return SWIG_OK;
  }
  return SWIG_ERROR;
}
     

/* Init */

SWIGINTERN int
print_swig_aux (SCM swig_smob, SCM port, scm_print_state *pstate, 
                const char *attribute)
{
  swig_type_info *type;
  
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) attribute, port);
    scm_puts((char *) "swig-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " ", port);
    scm_intprint((long) SCM_CELL_WORD_1(swig_smob), 16, port);
    scm_puts((char *) ">", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

  
SWIGINTERN int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "");
}

SWIGINTERN int
print_collectable_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "collectable-");
}

SWIGINTERN int
print_destroyed_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "destroyed-");
}

SWIGINTERN int
print_member_function_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  swig_type_info *type;
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) "swig-member-function-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " >", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

SWIGINTERN SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CELL_WORD_0(A) == SCM_CELL_WORD_0(B) && SCM_CELL_WORD_1(A) == SCM_CELL_WORD_1(B) 
      && SCM_CELL_WORD_2(A) == SCM_CELL_WORD_2(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

SWIGINTERN size_t
free_swig(SCM A)
{
  swig_type_info *type = (swig_type_info *) SCM_CELL_WORD_2(A);
  if (type) {
    if (type->clientdata && ((swig_guile_clientdata *)type->clientdata)->destroy)
      ((swig_guile_clientdata *)type->clientdata)->destroy(A);
  } 
  return 0;
}

SWIGINTERN size_t
free_swig_member_function(SCM A)
{
  free((swig_type_info *) SCM_CELL_WORD_1(A));
  return 0;
}

SWIGINTERN int
ensure_smob_tag(SCM swig_module,
		scm_t_bits *tag_variable,
		const char *smob_name,
		const char *scheme_variable_name)
{
  SCM variable = scm_sym2var(scm_str2symbol(scheme_variable_name),
			     scm_module_lookup_closure(swig_module),
			     SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    *tag_variable = scm_make_smob_type((char*)scheme_variable_name, 0);
    SCM_VARIABLE_SET(variable,
		     scm_ulong2num(*tag_variable));
    return 1;
  }
  else {
    *tag_variable = scm_num2ulong(SCM_VARIABLE_REF(variable), 0,
				  "SWIG_Guile_Init");
    return 0;
  }
}

SWIGINTERN SCM
SWIG_Guile_Init ()
{
  static SCM swig_module;
  
  if (swig_initialized) return swig_module;
  swig_initialized = 1;

  swig_module = scm_c_resolve_module("Swig swigrun");
  if (ensure_smob_tag(swig_module, &swig_tag,
		      "swig-pointer", "swig-pointer-tag")) {
    scm_set_smob_print(swig_tag, print_swig);
    scm_set_smob_equalp(swig_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_collectable_tag,
		      "collectable-swig-pointer", "collectable-swig-pointer-tag")) {
    scm_set_smob_print(swig_collectable_tag, print_collectable_swig);
    scm_set_smob_equalp(swig_collectable_tag, equalp_swig);
    scm_set_smob_free(swig_collectable_tag, free_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_destroyed_tag,
		      "destroyed-swig-pointer", "destroyed-swig-pointer-tag")) {
    scm_set_smob_print(swig_destroyed_tag, print_destroyed_swig);
    scm_set_smob_equalp(swig_destroyed_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_member_function_tag,
		      "swig-member-function-pointer", "swig-member-function-pointer-tag")) {
    scm_set_smob_print(swig_member_function_tag, print_member_function_swig);
    scm_set_smob_free(swig_member_function_tag, free_swig_member_function);
  }
  swig_make_func = scm_permanent_object(
  scm_variable_ref(scm_c_module_lookup(scm_c_resolve_module("oop goops"), "make")));
  swig_keyword = scm_permanent_object(scm_c_make_keyword((char*) "init-smob"));
  swig_symbol = scm_permanent_object(scm_str2symbol("swig-smob"));
#ifdef SWIG_INIT_RUNTIME_MODULE
  SWIG_INIT_RUNTIME_MODULE
#endif

  return swig_module;
}

SWIGINTERN swig_module_info *
SWIG_Guile_GetModule(void)
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();

  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    return NULL;
  } else {
    return (swig_module_info *) scm_num2ulong(SCM_VARIABLE_REF(variable), 0, "SWIG_Guile_Init");
  }
}

SWIGINTERN void
SWIG_Guile_SetModule(swig_module_info *swig_module)
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();
    
  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);

  SCM_VARIABLE_SET(variable, scm_ulong2num((unsigned long) swig_module));
}

SWIGINTERN int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!SCM_CONSP(rest))
      scm_wrong_num_args(scm_makfrom0str((char *) procname));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && SCM_CONSP(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = SCM_UNDEFINED;
  if (!SCM_NULLP(rest))
    scm_wrong_num_args(scm_makfrom0str((char *) procname));
  return num_args_passed;
}

#ifdef __cplusplus
}
#endif



#define GUILE_MAYBE_VALUES \
      if (gswig_list_p) gswig_result = scm_values(gswig_result);

#define GUILE_MAYBE_VECTOR \
      if (gswig_list_p) gswig_result = scm_vector(gswig_result);

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == SCM_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
      if (!gswig_list_p) {							\
	      gswig_list_p = 1;							\
	      gswig_result = scm_listify(gswig_result, object, SCM_UNDEFINED);	\
      }									\
      else									\
            gswig_result = scm_append(scm_listify(gswig_result, scm_listify(object, SCM_UNDEFINED), SCM_UNDEFINED));		\
    }
    /* used by Lib/exception.i */
    #define gh_symbol2scm scm_str2symbol
    /* useb by Lib/cdata.i */
    #define gh_str2scm scm_mem2string



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_a_3__float swig_types[0]
#define SWIGTYPE_p_a_4__a_4__float swig_types[1]
#define SWIGTYPE_p_a_4__float swig_types[2]
#define SWIGTYPE_p_a_6__float swig_types[3]
#define SWIGTYPE_p_f___void swig_types[4]
#define SWIGTYPE_p_f_float_float_float_float__float swig_types[5]
#define SWIGTYPE_p_f_float_int__void swig_types[6]
#define SWIGTYPE_p_f_int_int_p_char__void swig_types[7]
#define SWIGTYPE_p_f_p_char_p_char_v_______void swig_types[8]
#define SWIGTYPE_p_f_p_void__void swig_types[9]
#define SWIGTYPE_p_f_p_void_float__void swig_types[10]
#define SWIGTYPE_p_float swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_p_char swig_types[13]
#define SWIGTYPE_p_p_f_int_int_p_char__void swig_types[14]
#define SWIGTYPE_p_p_void swig_types[15]
#define SWIGTYPE_p_short swig_types[16]
#define SWIGTYPE_p_unsigned_long swig_types[17]
#define SWIGTYPE_p_void swig_types[18]
static swig_type_info *swig_types[20];
static swig_module_info swig_module = {swig_types, 19, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#include <ri.h>
#include <limits.h>


  #ifndef _POSIX_SOURCE
  /* This is needed on Solaris for fdopen(). */
  #  define _POSIX_SOURCE 199506L
  #endif
  #include <stdio.h>
  #include <errno.h>
  #include <unistd.h>


/* Define a helper function */
static RtInt*
convert_int_array(SCM input, int size) {
  int i;
  RtInt *result;
  if (scm_is_false(scm_u32vector_p(input))) {
    return NULL; /* DO SOMETHING USEFUL */
  };
  if (scm_to_int(scm_u32vector_length(input)) != size) {
    return NULL; /* DO SOMETHING USEFUL */
  };
  result = (RtInt*) calloc(size,sizeof(RtInt));
  for (i = 0; i < size; i++) {
      /* Since it's a uniform float vector, we know they are all floats */
      result[i] = (RtInt) scm_to_int(scm_u32vector_ref(input,scm_from_unsigned_integer(i)));
  };
  return result;
}

static RtFloat*
convert_float_array(SCM input, int size) {
  int i;
  RtFloat *result;
  if (scm_is_false(scm_f32vector_p(input))) {
    return NULL; /* DO SOMETHING USEFUL */
  };
  if (scm_to_int(scm_f32vector_length(input)) != size) {
    return NULL; /* DO SOMETHING USEFUL */
  };
  result = (RtFloat*) calloc(size,sizeof(RtFloat));
  for (i = 0; i < size; i++) {
      /* Since it's a uniform float vector, we know they are all floats */
      result[i] = (RtFloat) scm_to_double(scm_f32vector_ref(input,scm_from_unsigned_integer(i)));
  };
  return result;
}

static RtFloat**
convert_float_matrix(SCM input, int i, int j) {
  int ni,nj;
  RtFloat **result;
  if (!scm_is_typed_array(input,scm_string_to_symbol(scm_from_locale_string("f32")))) {
    return NULL; /* DO SOMETHING USEFUL */
  };
  result = (RtFloat**) calloc(i,sizeof(RtFloat*));
  for (ni = 0; ni < i; ni++) {
          result[ni] = (RtFloat*) calloc(j,sizeof(RtFloat));
         for (nj = 0; nj < j; nj++) {
             /* Since it's a uniform float vector, we know they are all floats */
          result[ni][nj] = (RtFloat) scm_to_double(scm_f32vector_ref(scm_array_contents(input,0),scm_from_unsigned_integer(ni*(i) + nj)));
          };
  };
  return result;
}


static int
convert_param_list(SCM input, RtInt* count, RtToken *tokens[], RtPointer *values[]) {
  int length;
  int i;
  if (scm_is_false((scm_list_p(input)))) {
    scm_display(scm_from_locale_string ("Parameter list required"),scm_current_error_port ());
    return 0; /* DO SOMETHING USEFUL */
  };
  length = scm_to_int(scm_length(input));
  if (scm_is_false(scm_even_p(scm_from_int(length)))) {
    scm_display(scm_from_locale_string ("Parameter list requires even number of tokens and values"),scm_current_error_port ());
    return 0; /* DO SOMETHING USEFUL */
  };
  *count = (RtInt) length/2;
  *tokens = (RtToken*) calloc(*count,sizeof(RtToken));
  *values = (RtPointer*) calloc(*count,sizeof(RtPointer));
  for (i = 0; i < length; i+=2) {
    /* check the strings */
    /* check the values  and conver from appropriate type*/
    SCM token = scm_list_ref(input,scm_from_int(i));
    SCM value = scm_list_ref(input,scm_from_int(i+1));
    if (scm_is_false(scm_string_p(token))) {
      scm_display(scm_from_locale_string ("Tokens must be strings in param list"),scm_current_error_port ());
      return 0; /* DO SOMETHING USEFUL */
    };
    (*tokens)[i/2] = (RtToken) scm_to_locale_string(token);

    if(scm_is_unsigned_integer(value,0,UINT_MAX)){
      RtInt *val = (RtInt*)malloc(sizeof (RtInt));
      *val = scm_to_int(value) ;
      (*values)[i/2] = (RtPointer) val;
    } else if(scm_is_number(value)){
      RtFloat *val = (RtFloat*)malloc(sizeof (RtFloat));
      *val = (RtFloat)scm_to_double(value); 
      (*values)[i/2] = (RtPointer) val;
    } else if(scm_is_string(value)){
      RtToken *val = (RtToken*)malloc(sizeof (RtToken));
      *val = (RtToken)scm_to_locale_string(value); 
      (*values)[i/2] = (RtPointer) val;
    } else if(scm_is_true(scm_f32vector_p(value))){
      int size = scm_to_int(scm_f32vector_length(value));
      RtFloat* val = convert_float_array(value, size);
      (*values)[i/2] = (RtPointer) val;
    } else if(scm_is_true(scm_u32vector_p(value))){
      int size = scm_to_int(scm_u32vector_length(value));
      RtInt* val = convert_int_array(value, size);
      (*values)[i/2] = (RtPointer) val;
    } else if(scm_is_true(scm_list_p(value))){
      int size = scm_to_int(scm_length(value));
/*      RtToken* val = convert_int_array(value, size);
      (*values)[i/2] = (RtPointer) val;*/
    } else {
      scm_display(scm_from_locale_string ("Unkown value type in param list"),scm_current_error_port ());
      /* should really free up some RAM */
      return 0;
    };
  };

  return 1;
}


#include "lightning.h"
#include "libguile.h"

/*typedef RtVoid  ( *RtFunc ) ();*/
RtVoid TrampolineRtFunc (SCM P)
{

  if (!scm_is_eq (scm_thunk_p (P), SCM_BOOL_T)){
    printf ("Wont call non procedure %p\n",P);
    return;
  }

  scm_call_0(P);
  return;
};

RtFunc MakeSCMCallbackRtFunc(SCM p)
{
  RtFunc    callback;             /* ptr to generated code */
  char          *start, *end;           /* a couple of labels */

  jit_insn *codegen = (jit_insn*) malloc (1024);
  callback = (RtFunc) (jit_set_ip(codegen).vptr);
  start = jit_get_ip().ptr;
  jit_prolog(0);
  jit_movi_p(JIT_R0, p);
  jit_prepare(1);
    jit_pusharg_p(JIT_R0);
  jit_finish(TrampolineRtFunc);
  jit_ret();
  end = jit_get_ip().ptr;

  jit_flush_code(start, end);

  return callback;
};


/* typedef RtVoid  ( *RtProgressFunc ) ( RtFloat PercentComplete, RtInt FrameNo );*/
RtVoid TrampolineRtProgressFunc (SCM P, RtFloat arg1, RtInt arg2)
{

  if (!scm_is_eq (scm_procedure_p (P), SCM_BOOL_T)){
    printf ("Wont call, not a Void (RtFloat,RtInt) procedure %p\n",P);
    return;
  }

  scm_call_2(P,scm_double2num((double)arg1),scm_int2num((int) arg2));
  return;
};

RtProgressFunc MakeSCMCallbackRtProgressFunc(SCM p)
{
  RtProgressFunc callback;             /* ptr to generated code */
  char          *start, *end;           /* a couple of labels */
  float arg1;
  int arg2;

  jit_insn *codegen = (jit_insn*) malloc (1024);
  callback = (RtProgressFunc) (jit_set_ip(codegen).vptr);
  start = jit_get_ip().ptr;
  jit_prolog(2);
  arg1 = jit_arg_f();
  arg2 = jit_arg_i();
  jit_movi_p(JIT_R0, p);
  jit_getarg_f(JIT_FPR1, arg1);
  jit_getarg_i(JIT_R2, arg2);
  jit_prepare(3);
    jit_pusharg_i(JIT_R2);
    jit_pusharg_f(JIT_FPR1);
    jit_pusharg_p(JIT_R0);
  jit_finish(TrampolineRtProgressFunc);
  jit_ret();
  end = jit_get_ip().ptr;

  jit_flush_code(start, end);

  return callback;
};


/* typedef RtVoid  ( *RtProcSubdivFunc ) ( RtPointer, RtFloat ); */
RtVoid TrampolineRtProcSubdivFunc (SCM P, RtPointer arg1, RtFloat arg2)
{

  if (!scm_is_eq (scm_procedure_p (P), SCM_BOOL_T)){
    printf ("Wont call, not a Void (RtPointer,,RtFloat) procedure %p\n",P);
    return;
  }

/*  scm_call_2(P,SWIG_NewPointerObj (arg1, SWIGTYPE_p_void, 0),scm_double2num((int) arg2)); */
  scm_call_2(P,(SCM) arg1,scm_double2num((int) arg2));
  return;
};

RtProcSubdivFunc MakeSCMCallbackRtProcSubdivFunc(SCM p)
{
  RtProcSubdivFunc callback;             /* ptr to generated code */
  char          *start, *end;           /* a couple of labels */
  int arg1;
  int arg2;

  jit_insn *codegen = (jit_insn*) malloc (1024);
  callback = (RtProcSubdivFunc) (jit_set_ip(codegen).vptr);
  start = jit_get_ip().ptr;
  jit_prolog(2);
  arg1 = jit_arg_p();
  arg2 = jit_arg_f();
  jit_movi_p(JIT_R0, p);
  jit_getarg_p(JIT_R1, arg1);
  jit_getarg_f(JIT_FPR2, arg2);
  jit_prepare(3);
    jit_pusharg_f(JIT_FPR2);
    jit_pusharg_p(JIT_R1);
    jit_pusharg_p(JIT_R0);
  jit_finish(TrampolineRtProcSubdivFunc);
  jit_ret();
  end = jit_get_ip().ptr;

  jit_flush_code(start, end);

  return callback;
};


/* typedef RtVoid  ( *RtProcFreeFunc ) ( RtPointer ); */
RtVoid TrampolineRtProcFreeFunc (SCM P, RtPointer arg1)
{

  if (!scm_is_eq (scm_procedure_p (P), SCM_BOOL_T)){
    printf ("Wont call, not a Void (RtPointer) procedure %p\n",P);
    return;
  }

/*  scm_call_1(P,SWIG_NewPointerObj (arg1, SWIGTYPE_p_void, 0)); */
  scm_call_1(P,(SCM) arg1);
  return;
};

RtProcFreeFunc MakeSCMCallbackRtProcFreeFunc(SCM p)
{
  RtProcFreeFunc callback;             /* ptr to generated code */
  char          *start, *end;           /* a couple of labels */
  int arg1;

  jit_insn *codegen = (jit_insn*) malloc (1024);
  callback = (RtProcFreeFunc) (jit_set_ip(codegen).vptr);
  start = jit_get_ip().ptr;
  jit_prolog(1);
  arg1 = jit_arg_p();
  jit_movi_p(JIT_R0, p);
  jit_getarg_p(JIT_R1, arg1);
  jit_prepare(2);
    jit_pusharg_p(JIT_R1);
    jit_pusharg_p(JIT_R0);
  jit_finish(TrampolineRtProcFreeFunc);
  jit_ret();
  end = jit_get_ip().ptr;

  jit_flush_code(start, end);

  return callback;
};


/*typedef RtFloat ( *RtFilterFunc ) ( RtFloat, RtFloat, RtFloat, RtFloat );*/
RtFloat TrampolineRtFilterFunc (SCM P, RtFloat arg1, RtFloat arg2, RtFloat arg3, RtFloat arg4)
{
    printf ("GOt HERE! with %p \n",P);
    scm_display(P,SCM_BOOL_F);

  if (!scm_is_eq (scm_procedure_p (P), SCM_BOOL_T)){
    printf ("Wont call, not a Void (RtFloat,RtFloat,RtFloat,RtFloat) procedure %p\n",P);
    return 0;
  };

  RtFloat res =  (RtFloat) scm_to_double(scm_call_4(P,scm_double2num(arg1),scm_double2num(arg2),scm_double2num(arg3),scm_double2num(arg4)));
  return res;
};

RtFilterFunc MakeSCMCallbackRtFilterFunc(SCM p)
{
  RtFilterFunc callback;             /* ptr to generated code */
  char          *start, *end;           /* a couple of labels */
  int arg1;
  int arg2;
  int arg3;
  int arg4;

  jit_insn *codegen = (jit_insn*) malloc (4096);
  /*callback = (RtFilterFunc) (jit_set_ip(codegen).vptr);*/
  jit_set_ip(codegen);
  callback = (RtFilterFunc) jit_get_ip().iptr;
  jit_prolog(4);
  arg1 = jit_arg_f();
  arg2 = jit_arg_f();
  arg3 = jit_arg_f();
  arg4 = jit_arg_f();

  jit_prepare(5);
  jit_movi_p(JIT_V0, p);
  jit_getarg_f(JIT_FPR0, arg1);
  jit_getarg_f(JIT_FPR1, arg2);
  jit_getarg_f(JIT_FPR2, arg3);
  jit_getarg_f(JIT_FPR3, arg4);
    jit_pusharg_f(JIT_FPR3);
    jit_pusharg_f(JIT_FPR2);
    jit_pusharg_f(JIT_FPR1);
    jit_pusharg_f(JIT_FPR0);
    jit_pusharg_p(JIT_V0);
  jit_finish(TrampolineRtFilterFunc);
  jit_retval_f(JIT_FPRET);
  jit_ret();
  end = jit_get_ip().ptr;

  jit_flush_code((char*)callback, end);

  return callback;
};

static int gswig_const_AQSIS_COMPILER_H_INCLUDED = 1;
static int gswig_const_AQSIS_SYSTEM_POSIX = 1;
static int gswig_const_AQSIS_COMPILER_GCC = 1;
static char *gswig_const_SHARED_LIBRARY_SUFFIX = ".so";
static int gswig_const_RI_FALSE = 0;
static int gswig_const_RI_TRUE = 1;
static double gswig_const_RI_PI = 3.14159265359;
static double gswig_const_RI_PIO2 = 3.14159265359/2;
static char *gswig_const_RI_SHADER_EXTENSION = ".slx";
static SCM
_wrap_tokenCast (SCM s_0)
{
#define FUNC_NAME "tokenCast"
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (char *)tokenCast((char const *)arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TrampolineRtFunc (SCM s_0)
{
#define FUNC_NAME "TrampolineRtFunc"
  SCM arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  TrampolineRtFunc(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_MakeSCMCallbackRtFunc (SCM s_0)
{
#define FUNC_NAME "MakeSCMCallbackRtFunc"
  SCM arg1 ;
  RtFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (RtFunc)MakeSCMCallbackRtFunc(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f___void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TrampolineRtProgressFunc (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "TrampolineRtProgressFunc"
  SCM arg1 ;
  RtFloat arg2 ;
  RtInt arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtInt) scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  TrampolineRtProgressFunc(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_MakeSCMCallbackRtProgressFunc (SCM s_0)
{
#define FUNC_NAME "MakeSCMCallbackRtProgressFunc"
  SCM arg1 ;
  RtProgressFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (RtProgressFunc)MakeSCMCallbackRtProgressFunc(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f_float_int__void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TrampolineRtProcSubdivFunc (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "TrampolineRtProcSubdivFunc"
  SCM arg1 ;
  RtPointer arg2 = (RtPointer) 0 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = (RtPointer)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  TrampolineRtProcSubdivFunc(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_MakeSCMCallbackRtProcSubdivFunc (SCM s_0)
{
#define FUNC_NAME "MakeSCMCallbackRtProcSubdivFunc"
  SCM arg1 ;
  RtProcSubdivFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (RtProcSubdivFunc)MakeSCMCallbackRtProcSubdivFunc(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f_p_void_float__void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TrampolineRtProcFreeFunc (SCM s_0, SCM s_1)
{
#define FUNC_NAME "TrampolineRtProcFreeFunc"
  SCM arg1 ;
  RtPointer arg2 = (RtPointer) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = (RtPointer)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  TrampolineRtProcFreeFunc(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_MakeSCMCallbackRtProcFreeFunc (SCM s_0)
{
#define FUNC_NAME "MakeSCMCallbackRtProcFreeFunc"
  SCM arg1 ;
  RtProcFreeFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (RtProcFreeFunc)MakeSCMCallbackRtProcFreeFunc(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f_p_void__void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TrampolineRtFilterFunc (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "TrampolineRtFilterFunc"
  SCM arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  result = (RtFloat)TrampolineRtFilterFunc(arg1,arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_MakeSCMCallbackRtFilterFunc (SCM s_0)
{
#define FUNC_NAME "MakeSCMCallbackRtFilterFunc"
  SCM arg1 ;
  RtFilterFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (RtFilterFunc)MakeSCMCallbackRtFilterFunc(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f_float_float_float_float__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_AQSIS_COMPILER_H_INCLUDED(SCM s_0)
{
#define FUNC_NAME "AQSIS-COMPILER-H-INCLUDED"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_AQSIS_COMPILER_H_INCLUDED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_AQSIS_SYSTEM_POSIX(SCM s_0)
{
#define FUNC_NAME "AQSIS-SYSTEM-POSIX"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_AQSIS_SYSTEM_POSIX);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_AQSIS_COMPILER_GCC(SCM s_0)
{
#define FUNC_NAME "AQSIS-COMPILER-GCC"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_AQSIS_COMPILER_GCC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_SHARED_LIBRARY_SUFFIX(SCM s_0)
{
#define FUNC_NAME "SHARED-LIBRARY-SUFFIX"
  SCM gswig_result;
  
  {
    gswig_result = scm_makfrom0str(gswig_const_SHARED_LIBRARY_SUFFIX);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FALSE(SCM s_0)
{
#define FUNC_NAME "RI-FALSE"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_RI_FALSE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_TRUE(SCM s_0)
{
#define FUNC_NAME "RI-TRUE"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_RI_TRUE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PI(SCM s_0)
{
#define FUNC_NAME "RI-PI"
  SCM gswig_result;
  
  {
    gswig_result = scm_make_real(gswig_const_RI_PI);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PIO2(SCM s_0)
{
#define FUNC_NAME "RI-PIO2"
  SCM gswig_result;
  
  {
    gswig_result = scm_make_real(gswig_const_RI_PIO2);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SHADER_EXTENSION(SCM s_0)
{
#define FUNC_NAME "RI-SHADER-EXTENSION"
  SCM gswig_result;
  
  {
    gswig_result = scm_makfrom0str(gswig_const_RI_SHADER_EXTENSION);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FRAMEBUFFER(SCM s_0)
{
#define FUNC_NAME "RI-FRAMEBUFFER"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FRAMEBUFFER) free(RI_FRAMEBUFFER);
      RI_FRAMEBUFFER = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FRAMEBUFFER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FILE(SCM s_0)
{
#define FUNC_NAME "RI-FILE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FILE) free(RI_FILE);
      RI_FILE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FILE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RGB(SCM s_0)
{
#define FUNC_NAME "RI-RGB"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RGB) free(RI_RGB);
      RI_RGB = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RGB);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RGBA(SCM s_0)
{
#define FUNC_NAME "RI-RGBA"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RGBA) free(RI_RGBA);
      RI_RGBA = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RGBA);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RGBZ(SCM s_0)
{
#define FUNC_NAME "RI-RGBZ"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RGBZ) free(RI_RGBZ);
      RI_RGBZ = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RGBZ);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RGBAZ(SCM s_0)
{
#define FUNC_NAME "RI-RGBAZ"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RGBAZ) free(RI_RGBAZ);
      RI_RGBAZ = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RGBAZ);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_A(SCM s_0)
{
#define FUNC_NAME "RI-A"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_A) free(RI_A);
      RI_A = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_A);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_Z(SCM s_0)
{
#define FUNC_NAME "RI-Z"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_Z) free(RI_Z);
      RI_Z = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_Z);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_AZ(SCM s_0)
{
#define FUNC_NAME "RI-AZ"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_AZ) free(RI_AZ);
      RI_AZ = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_AZ);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_MERGE(SCM s_0)
{
#define FUNC_NAME "RI-MERGE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_MERGE) free(RI_MERGE);
      RI_MERGE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_MERGE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_ORIGIN(SCM s_0)
{
#define FUNC_NAME "RI-ORIGIN"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_ORIGIN) free(RI_ORIGIN);
      RI_ORIGIN = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_ORIGIN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PERSPECTIVE(SCM s_0)
{
#define FUNC_NAME "RI-PERSPECTIVE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PERSPECTIVE) free(RI_PERSPECTIVE);
      RI_PERSPECTIVE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PERSPECTIVE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_ORTHOGRAPHIC(SCM s_0)
{
#define FUNC_NAME "RI-ORTHOGRAPHIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_ORTHOGRAPHIC) free(RI_ORTHOGRAPHIC);
      RI_ORTHOGRAPHIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_ORTHOGRAPHIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_HIDDEN(SCM s_0)
{
#define FUNC_NAME "RI-HIDDEN"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_HIDDEN) free(RI_HIDDEN);
      RI_HIDDEN = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_HIDDEN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PAINT(SCM s_0)
{
#define FUNC_NAME "RI-PAINT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PAINT) free(RI_PAINT);
      RI_PAINT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PAINT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CONSTANT(SCM s_0)
{
#define FUNC_NAME "RI-CONSTANT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CONSTANT) free(RI_CONSTANT);
      RI_CONSTANT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CONSTANT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SMOOTH(SCM s_0)
{
#define FUNC_NAME "RI-SMOOTH"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SMOOTH) free(RI_SMOOTH);
      RI_SMOOTH = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SMOOTH);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FLATNESS(SCM s_0)
{
#define FUNC_NAME "RI-FLATNESS"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FLATNESS) free(RI_FLATNESS);
      RI_FLATNESS = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FLATNESS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FOV(SCM s_0)
{
#define FUNC_NAME "RI-FOV"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FOV) free(RI_FOV);
      RI_FOV = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FOV);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_AMBIENTLIGHT(SCM s_0)
{
#define FUNC_NAME "RI-AMBIENTLIGHT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_AMBIENTLIGHT) free(RI_AMBIENTLIGHT);
      RI_AMBIENTLIGHT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_AMBIENTLIGHT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_POINTLIGHT(SCM s_0)
{
#define FUNC_NAME "RI-POINTLIGHT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_POINTLIGHT) free(RI_POINTLIGHT);
      RI_POINTLIGHT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_POINTLIGHT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_DISTANTLIGHT(SCM s_0)
{
#define FUNC_NAME "RI-DISTANTLIGHT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_DISTANTLIGHT) free(RI_DISTANTLIGHT);
      RI_DISTANTLIGHT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_DISTANTLIGHT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SPOTLIGHT(SCM s_0)
{
#define FUNC_NAME "RI-SPOTLIGHT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SPOTLIGHT) free(RI_SPOTLIGHT);
      RI_SPOTLIGHT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SPOTLIGHT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_INTENSITY(SCM s_0)
{
#define FUNC_NAME "RI-INTENSITY"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_INTENSITY) free(RI_INTENSITY);
      RI_INTENSITY = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_INTENSITY);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_LIGHTCOLOR(SCM s_0)
{
#define FUNC_NAME "RI-LIGHTCOLOR"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_LIGHTCOLOR) free(RI_LIGHTCOLOR);
      RI_LIGHTCOLOR = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_LIGHTCOLOR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FROM(SCM s_0)
{
#define FUNC_NAME "RI-FROM"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FROM) free(RI_FROM);
      RI_FROM = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FROM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_TO(SCM s_0)
{
#define FUNC_NAME "RI-TO"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_TO) free(RI_TO);
      RI_TO = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_TO);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CONEANGLE(SCM s_0)
{
#define FUNC_NAME "RI-CONEANGLE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CONEANGLE) free(RI_CONEANGLE);
      RI_CONEANGLE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CONEANGLE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CONEDELTAANGLE(SCM s_0)
{
#define FUNC_NAME "RI-CONEDELTAANGLE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CONEDELTAANGLE) free(RI_CONEDELTAANGLE);
      RI_CONEDELTAANGLE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CONEDELTAANGLE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BEAMDISTRIBUTION(SCM s_0)
{
#define FUNC_NAME "RI-BEAMDISTRIBUTION"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BEAMDISTRIBUTION) free(RI_BEAMDISTRIBUTION);
      RI_BEAMDISTRIBUTION = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BEAMDISTRIBUTION);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_MATTE(SCM s_0)
{
#define FUNC_NAME "RI-MATTE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_MATTE) free(RI_MATTE);
      RI_MATTE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_MATTE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_METAL(SCM s_0)
{
#define FUNC_NAME "RI-METAL"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_METAL) free(RI_METAL);
      RI_METAL = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_METAL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PLASTIC(SCM s_0)
{
#define FUNC_NAME "RI-PLASTIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PLASTIC) free(RI_PLASTIC);
      RI_PLASTIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PLASTIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SHINYMETAL(SCM s_0)
{
#define FUNC_NAME "RI-SHINYMETAL"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SHINYMETAL) free(RI_SHINYMETAL);
      RI_SHINYMETAL = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SHINYMETAL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PAINTEDPLASTIC(SCM s_0)
{
#define FUNC_NAME "RI-PAINTEDPLASTIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PAINTEDPLASTIC) free(RI_PAINTEDPLASTIC);
      RI_PAINTEDPLASTIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PAINTEDPLASTIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_KA(SCM s_0)
{
#define FUNC_NAME "RI-KA"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_KA) free(RI_KA);
      RI_KA = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_KA);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_KD(SCM s_0)
{
#define FUNC_NAME "RI-KD"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_KD) free(RI_KD);
      RI_KD = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_KD);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_KS(SCM s_0)
{
#define FUNC_NAME "RI-KS"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_KS) free(RI_KS);
      RI_KS = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_KS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_ROUGHNESS(SCM s_0)
{
#define FUNC_NAME "RI-ROUGHNESS"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_ROUGHNESS) free(RI_ROUGHNESS);
      RI_ROUGHNESS = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_ROUGHNESS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_KR(SCM s_0)
{
#define FUNC_NAME "RI-KR"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_KR) free(RI_KR);
      RI_KR = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_KR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_TEXTURENAME(SCM s_0)
{
#define FUNC_NAME "RI-TEXTURENAME"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_TEXTURENAME) free(RI_TEXTURENAME);
      RI_TEXTURENAME = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_TEXTURENAME);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SPECULARCOLOR(SCM s_0)
{
#define FUNC_NAME "RI-SPECULARCOLOR"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SPECULARCOLOR) free(RI_SPECULARCOLOR);
      RI_SPECULARCOLOR = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SPECULARCOLOR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_DEPTHCUE(SCM s_0)
{
#define FUNC_NAME "RI-DEPTHCUE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_DEPTHCUE) free(RI_DEPTHCUE);
      RI_DEPTHCUE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_DEPTHCUE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_FOG(SCM s_0)
{
#define FUNC_NAME "RI-FOG"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_FOG) free(RI_FOG);
      RI_FOG = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_FOG);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BUMPY(SCM s_0)
{
#define FUNC_NAME "RI-BUMPY"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BUMPY) free(RI_BUMPY);
      RI_BUMPY = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BUMPY);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_MINDISTANCE(SCM s_0)
{
#define FUNC_NAME "RI-MINDISTANCE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_MINDISTANCE) free(RI_MINDISTANCE);
      RI_MINDISTANCE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_MINDISTANCE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_MAXDISTANCE(SCM s_0)
{
#define FUNC_NAME "RI-MAXDISTANCE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_MAXDISTANCE) free(RI_MAXDISTANCE);
      RI_MAXDISTANCE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_MAXDISTANCE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BACKGROUND(SCM s_0)
{
#define FUNC_NAME "RI-BACKGROUND"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BACKGROUND) free(RI_BACKGROUND);
      RI_BACKGROUND = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BACKGROUND);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_DISTANCE(SCM s_0)
{
#define FUNC_NAME "RI-DISTANCE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_DISTANCE) free(RI_DISTANCE);
      RI_DISTANCE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_DISTANCE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_AMPLITUDE(SCM s_0)
{
#define FUNC_NAME "RI-AMPLITUDE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_AMPLITUDE) free(RI_AMPLITUDE);
      RI_AMPLITUDE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_AMPLITUDE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RASTER(SCM s_0)
{
#define FUNC_NAME "RI-RASTER"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RASTER) free(RI_RASTER);
      RI_RASTER = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RASTER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SCREEN(SCM s_0)
{
#define FUNC_NAME "RI-SCREEN"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SCREEN) free(RI_SCREEN);
      RI_SCREEN = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SCREEN);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CAMERA(SCM s_0)
{
#define FUNC_NAME "RI-CAMERA"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CAMERA) free(RI_CAMERA);
      RI_CAMERA = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CAMERA);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_WORLD(SCM s_0)
{
#define FUNC_NAME "RI-WORLD"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_WORLD) free(RI_WORLD);
      RI_WORLD = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_WORLD);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_OBJECT(SCM s_0)
{
#define FUNC_NAME "RI-OBJECT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_OBJECT) free(RI_OBJECT);
      RI_OBJECT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_OBJECT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_INSIDE(SCM s_0)
{
#define FUNC_NAME "RI-INSIDE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_INSIDE) free(RI_INSIDE);
      RI_INSIDE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_INSIDE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_OUTSIDE(SCM s_0)
{
#define FUNC_NAME "RI-OUTSIDE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_OUTSIDE) free(RI_OUTSIDE);
      RI_OUTSIDE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_OUTSIDE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_LH(SCM s_0)
{
#define FUNC_NAME "RI-LH"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_LH) free(RI_LH);
      RI_LH = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_LH);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_RH(SCM s_0)
{
#define FUNC_NAME "RI-RH"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_RH) free(RI_RH);
      RI_RH = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_RH);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_P(SCM s_0)
{
#define FUNC_NAME "RI-P"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_P) free(RI_P);
      RI_P = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_P);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PZ(SCM s_0)
{
#define FUNC_NAME "RI-PZ"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PZ) free(RI_PZ);
      RI_PZ = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PZ);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PW(SCM s_0)
{
#define FUNC_NAME "RI-PW"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PW) free(RI_PW);
      RI_PW = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PW);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_N(SCM s_0)
{
#define FUNC_NAME "RI-N"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_N) free(RI_N);
      RI_N = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_N);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_NP(SCM s_0)
{
#define FUNC_NAME "RI-NP"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_NP) free(RI_NP);
      RI_NP = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_NP);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CS(SCM s_0)
{
#define FUNC_NAME "RI-CS"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CS) free(RI_CS);
      RI_CS = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_OS(SCM s_0)
{
#define FUNC_NAME "RI-OS"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_OS) free(RI_OS);
      RI_OS = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_OS);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_S(SCM s_0)
{
#define FUNC_NAME "RI-S"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_S) free(RI_S);
      RI_S = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_S);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_T(SCM s_0)
{
#define FUNC_NAME "RI-T"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_T) free(RI_T);
      RI_T = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_T);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_ST(SCM s_0)
{
#define FUNC_NAME "RI-ST"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_ST) free(RI_ST);
      RI_ST = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_ST);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BILINEAR(SCM s_0)
{
#define FUNC_NAME "RI-BILINEAR"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BILINEAR) free(RI_BILINEAR);
      RI_BILINEAR = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BILINEAR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BICUBIC(SCM s_0)
{
#define FUNC_NAME "RI-BICUBIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BICUBIC) free(RI_BICUBIC);
      RI_BICUBIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BICUBIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_LINEAR(SCM s_0)
{
#define FUNC_NAME "RI-LINEAR"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_LINEAR) free(RI_LINEAR);
      RI_LINEAR = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_LINEAR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CUBIC(SCM s_0)
{
#define FUNC_NAME "RI-CUBIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CUBIC) free(RI_CUBIC);
      RI_CUBIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CUBIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PRIMITIVE(SCM s_0)
{
#define FUNC_NAME "RI-PRIMITIVE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PRIMITIVE) free(RI_PRIMITIVE);
      RI_PRIMITIVE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PRIMITIVE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_INTERSECTION(SCM s_0)
{
#define FUNC_NAME "RI-INTERSECTION"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_INTERSECTION) free(RI_INTERSECTION);
      RI_INTERSECTION = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_INTERSECTION);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_UNION(SCM s_0)
{
#define FUNC_NAME "RI-UNION"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_UNION) free(RI_UNION);
      RI_UNION = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_UNION);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_DIFFERENCE(SCM s_0)
{
#define FUNC_NAME "RI-DIFFERENCE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_DIFFERENCE) free(RI_DIFFERENCE);
      RI_DIFFERENCE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_DIFFERENCE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_WRAP(SCM s_0)
{
#define FUNC_NAME "RI-WRAP"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_WRAP) free(RI_WRAP);
      RI_WRAP = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_WRAP);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_NOWRAP(SCM s_0)
{
#define FUNC_NAME "RI-NOWRAP"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_NOWRAP) free(RI_NOWRAP);
      RI_NOWRAP = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_NOWRAP);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PERIODIC(SCM s_0)
{
#define FUNC_NAME "RI-PERIODIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PERIODIC) free(RI_PERIODIC);
      RI_PERIODIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PERIODIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_NONPERIODIC(SCM s_0)
{
#define FUNC_NAME "RI-NONPERIODIC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_NONPERIODIC) free(RI_NONPERIODIC);
      RI_NONPERIODIC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_NONPERIODIC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CLAMP(SCM s_0)
{
#define FUNC_NAME "RI-CLAMP"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CLAMP) free(RI_CLAMP);
      RI_CLAMP = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CLAMP);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_BLACK(SCM s_0)
{
#define FUNC_NAME "RI-BLACK"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_BLACK) free(RI_BLACK);
      RI_BLACK = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_BLACK);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_IGNORE(SCM s_0)
{
#define FUNC_NAME "RI-IGNORE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_IGNORE) free(RI_IGNORE);
      RI_IGNORE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_IGNORE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_PRINT(SCM s_0)
{
#define FUNC_NAME "RI-PRINT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_PRINT) free(RI_PRINT);
      RI_PRINT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_PRINT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_ABORT(SCM s_0)
{
#define FUNC_NAME "RI-ABORT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_ABORT) free(RI_ABORT);
      RI_ABORT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_ABORT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_HANDLER(SCM s_0)
{
#define FUNC_NAME "RI-HANDLER"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_HANDLER) free(RI_HANDLER);
      RI_HANDLER = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_HANDLER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_IDENTIFIER(SCM s_0)
{
#define FUNC_NAME "RI-IDENTIFIER"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_IDENTIFIER) free(RI_IDENTIFIER);
      RI_IDENTIFIER = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_IDENTIFIER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_NAME(SCM s_0)
{
#define FUNC_NAME "RI-NAME"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_NAME) free(RI_NAME);
      RI_NAME = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_NAME);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_COMMENT(SCM s_0)
{
#define FUNC_NAME "RI-COMMENT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_COMMENT) free(RI_COMMENT);
      RI_COMMENT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_COMMENT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_STRUCTURE(SCM s_0)
{
#define FUNC_NAME "RI-STRUCTURE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_STRUCTURE) free(RI_STRUCTURE);
      RI_STRUCTURE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_STRUCTURE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_VERBATIM(SCM s_0)
{
#define FUNC_NAME "RI-VERBATIM"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_VERBATIM) free(RI_VERBATIM);
      RI_VERBATIM = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_VERBATIM);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_WIDTH(SCM s_0)
{
#define FUNC_NAME "RI-WIDTH"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_WIDTH) free(RI_WIDTH);
      RI_WIDTH = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_WIDTH);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CONSTANTWIDTH(SCM s_0)
{
#define FUNC_NAME "RI-CONSTANTWIDTH"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CONSTANTWIDTH) free(RI_CONSTANTWIDTH);
      RI_CONSTANTWIDTH = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CONSTANTWIDTH);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_CURRENT(SCM s_0)
{
#define FUNC_NAME "RI-CURRENT"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_CURRENT) free(RI_CURRENT);
      RI_CURRENT = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_CURRENT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_SHADER(SCM s_0)
{
#define FUNC_NAME "RI-SHADER"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_SHADER) free(RI_SHADER);
      RI_SHADER = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_SHADER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_EYE(SCM s_0)
{
#define FUNC_NAME "RI-EYE"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_EYE) free(RI_EYE);
      RI_EYE = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_EYE);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RI_NDC(SCM s_0)
{
#define FUNC_NAME "RI-NDC"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      if (RI_NDC) free(RI_NDC);
      RI_NDC = (RtToken) SWIG_scm2str(s_0);
    }
  }
  {
    gswig_result = scm_makfrom0str(RI_NDC);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBezierBasis(SCM s_0)
{
#define FUNC_NAME "RiBezierBasis"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      void *temp;
      int ii;
      float *b = 0;
      temp = SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__float, 1, 0);
      b = (float *) RiBezierBasis;
      for (ii = 0; ii < 4*4; ii++) b[ii] = *((float *) temp + ii);
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (RiBezierBasis, SWIGTYPE_p_a_4__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBSplineBasis(SCM s_0)
{
#define FUNC_NAME "RiBSplineBasis"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      void *temp;
      int ii;
      float *b = 0;
      temp = SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__float, 1, 0);
      b = (float *) RiBSplineBasis;
      for (ii = 0; ii < 4*4; ii++) b[ii] = *((float *) temp + ii);
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (RiBSplineBasis, SWIGTYPE_p_a_4__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCatmullRomBasis(SCM s_0)
{
#define FUNC_NAME "RiCatmullRomBasis"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      void *temp;
      int ii;
      float *b = 0;
      temp = SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__float, 1, 0);
      b = (float *) RiCatmullRomBasis;
      for (ii = 0; ii < 4*4; ii++) b[ii] = *((float *) temp + ii);
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (RiCatmullRomBasis, SWIGTYPE_p_a_4__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiHermiteBasis(SCM s_0)
{
#define FUNC_NAME "RiHermiteBasis"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      void *temp;
      int ii;
      float *b = 0;
      temp = SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__float, 1, 0);
      b = (float *) RiHermiteBasis;
      for (ii = 0; ii < 4*4; ii++) b[ii] = *((float *) temp + ii);
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (RiHermiteBasis, SWIGTYPE_p_a_4__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPowerBasis(SCM s_0)
{
#define FUNC_NAME "RiPowerBasis"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      void *temp;
      int ii;
      float *b = 0;
      temp = SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__float, 1, 0);
      b = (float *) RiPowerBasis;
      for (ii = 0; ii < 4*4; ii++) b[ii] = *((float *) temp + ii);
    }
  }
  {
    gswig_result = SWIG_NewPointerObj (RiPowerBasis, SWIGTYPE_p_a_4__float, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiLastError(SCM s_0)
{
#define FUNC_NAME "RiLastError"
  SCM gswig_result;
  
  if (s_0 != SCM_UNDEFINED) {
    {
      RiLastError = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
    }
  }
  {
    gswig_result = scm_long2num(RiLastError);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_BasisFromName (SCM s_0, SCM s_1)
{
#define FUNC_NAME "BasisFromName"
  RtBasis *arg1 = (RtBasis *) 0 ;
  char *arg2 = (char *) 0 ;
  RtBoolean result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtBasis *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_a_4__a_4__float, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (RtBoolean)BasisFromName((float (*)[4][4])arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProgressHandler (SCM s_0)
{
#define FUNC_NAME "RiProgressHandler"
  RtProgressFunc arg1 = (RtProgressFunc) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = MakeSCMCallbackRtProgressFunc(s_0);
  }
  RiProgressHandler(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPreRenderFunction (SCM s_0)
{
#define FUNC_NAME "RiPreRenderFunction"
  RtFunc arg1 = (RtFunc) 0 ;
  RtFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = MakeSCMCallbackRtFunc(s_0);
  }
  result = (RtFunc)RiPreRenderFunction(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f___void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPreWorldFunction (SCM s_0)
{
#define FUNC_NAME "RiPreWorldFunction"
  RtFunc arg1 = (RtFunc) 0 ;
  RtFunc result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = MakeSCMCallbackRtFunc(s_0);
  }
  result = (RtFunc)RiPreWorldFunction(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_f___void, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDeclare (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiDeclare"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtToken result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (RtToken)RiDeclare(arg1,arg2);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBegin (SCM s_0)
{
#define FUNC_NAME "RiBegin"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiBegin(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiEnd ()
{
#define FUNC_NAME "RiEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiGetContext ()
{
#define FUNC_NAME "RiGetContext"
  RtContextHandle result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (RtContextHandle)RiGetContext();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiContext (SCM s_0)
{
#define FUNC_NAME "RiContext"
  RtContextHandle arg1 = (RtContextHandle) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtContextHandle)SWIG_MustGetPtr(s_0, NULL, 1, 0);
  }
  RiContext(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiFrameBegin (SCM s_0)
{
#define FUNC_NAME "RiFrameBegin"
  RtInt arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  RiFrameBegin(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiFrameEnd ()
{
#define FUNC_NAME "RiFrameEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiFrameEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiWorldBegin ()
{
#define FUNC_NAME "RiWorldBegin"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiWorldBegin();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiWorldEnd ()
{
#define FUNC_NAME "RiWorldEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiWorldEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiIfBegin (SCM s_0)
{
#define FUNC_NAME "RiIfBegin"
  RtString arg1 = (RtString) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiIfBegin(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiElseIf (SCM s_0)
{
#define FUNC_NAME "RiElseIf"
  RtString arg1 = (RtString) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiElseIf(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiElse ()
{
#define FUNC_NAME "RiElse"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiElse();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiIfEnd ()
{
#define FUNC_NAME "RiIfEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiIfEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiFormat (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiFormat"
  RtInt arg1 ;
  RtInt arg2 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  RiFormat(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiFrameAspectRatio (SCM s_0)
{
#define FUNC_NAME "RiFrameAspectRatio"
  RtFloat arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  RiFrameAspectRatio(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiScreenWindow (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiScreenWindow"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  RiScreenWindow(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCropWindow (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiCropWindow"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  RiCropWindow(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProjection (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiProjection"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiProjectionV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiClipping (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiClipping"
  RtFloat arg1 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiClipping(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiClippingPlane (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "RiClippingPlane"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtFloat arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = (RtFloat) scm_num2dbl(s_5, FUNC_NAME);
  }
  RiClippingPlane(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDepthOfField (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiDepthOfField"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  RiDepthOfField(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiShutter (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiShutter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiShutter(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPixelVariance (SCM s_0)
{
#define FUNC_NAME "RiPixelVariance"
  RtFloat arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  RiPixelVariance(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPixelSamples (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiPixelSamples"
  RtFloat arg1 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiPixelSamples(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPixelFilter (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiPixelFilter"
  RtFilterFunc arg1 = (RtFilterFunc) 0 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = MakeSCMCallbackRtFilterFunc(s_0);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  RiPixelFilter(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiExposure (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiExposure"
  RtFloat arg1 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiExposure(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiImager (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiImager"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiImagerV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiQuantize (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiQuantize"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtInt arg3 ;
  RtInt arg4 ;
  RtFloat arg5 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtInt) scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (RtInt) scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  RiQuantize(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDisplay (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiDisplay"
  RtToken arg1 = (RtToken) 0 ;
  RtToken arg2 = (RtToken) 0 ;
  RtToken arg3 = (RtToken) 0 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtToken)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiDisplayV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiGaussianFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiGaussianFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiGaussianFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBoxFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiBoxFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiBoxFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMitchellFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiMitchellFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiMitchellFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTriangleFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiTriangleFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiTriangleFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCatmullRomFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiCatmullRomFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiCatmullRomFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSincFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiSincFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiSincFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDiskFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiDiskFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiDiskFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBesselFilter (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiBesselFilter"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (RtFloat)RiBesselFilter(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiHider (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiHider"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiHiderV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiColorSamples (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiColorSamples"
  RtInt arg1 ;
  RtFloat *arg2 ;
  RtFloat *arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtFloat *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  {
    arg3 = (RtFloat *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_float, 3, 0);
  }
  RiColorSamples(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiRelativeDetail (SCM s_0)
{
#define FUNC_NAME "RiRelativeDetail"
  RtFloat arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  RiRelativeDetail(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiOption (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiOption"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiOptionV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiAttributeBegin ()
{
#define FUNC_NAME "RiAttributeBegin"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiAttributeBegin();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiAttributeEnd ()
{
#define FUNC_NAME "RiAttributeEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiAttributeEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiColor (SCM s_0)
{
#define FUNC_NAME "RiColor"
  RtFloat *arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = convert_float_array(s_0, 3);
    if (!arg1) return NULL;
  }
  RiColor(arg1);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiOpacity (SCM s_0)
{
#define FUNC_NAME "RiOpacity"
  RtFloat *arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_float, 1, 0);
  }
  RiOpacity(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTextureCoordinates (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "RiTextureCoordinates"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtFloat arg6 ;
  RtFloat arg7 ;
  RtFloat arg8 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = (RtFloat) scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = (RtFloat) scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = (RtFloat) scm_num2dbl(s_7, FUNC_NAME);
  }
  RiTextureCoordinates(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiLightSource (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiLightSource"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  RtLightHandle result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  result = (RtLightHandle)RiLightSourceV(arg1,arg2,arg3,arg4);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiAreaLightSource (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiAreaLightSource"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  RtLightHandle result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  result = (RtLightHandle)RiAreaLightSourceV(arg1,arg2,arg3,arg4);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiIlluminate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiIlluminate"
  RtLightHandle arg1 = (RtLightHandle) 0 ;
  RtBoolean arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtLightHandle)SWIG_MustGetPtr(s_0, NULL, 1, 0);
  }
  {
    arg2 = (RtBoolean) scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  RiIlluminate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSurface (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiSurface"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiSurfaceV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDeformation (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiDeformation"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiDeformationV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDisplacement (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiDisplacement"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiDisplacementV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiAtmosphere (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiAtmosphere"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiAtmosphereV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiInterior (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiInterior"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiInteriorV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiExterior (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiExterior"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiExteriorV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiShaderLayer (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiShaderLayer"
  RtToken arg1 = (RtToken) 0 ;
  RtToken arg2 = (RtToken) 0 ;
  RtToken arg3 = (RtToken) 0 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtToken)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiShaderLayerV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiConnectShaderLayers (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiConnectShaderLayers"
  RtToken arg1 = (RtToken) 0 ;
  RtToken arg2 = (RtToken) 0 ;
  RtToken arg3 = (RtToken) 0 ;
  RtToken arg4 = (RtToken) 0 ;
  RtToken arg5 = (RtToken) 0 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtToken)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (RtToken)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (RtToken)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  RiConnectShaderLayers(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiShadingRate (SCM s_0)
{
#define FUNC_NAME "RiShadingRate"
  RtFloat arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  RiShadingRate(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiShadingInterpolation (SCM s_0)
{
#define FUNC_NAME "RiShadingInterpolation"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiShadingInterpolation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMatte (SCM s_0)
{
#define FUNC_NAME "RiMatte"
  RtBoolean arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtBoolean) scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  RiMatte(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBound (SCM s_0)
{
#define FUNC_NAME "RiBound"
  RtFloat *arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = convert_float_array(s_0, 6);
    if (!arg1) return NULL;
  }
  RiBound(arg1);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDetail (SCM s_0)
{
#define FUNC_NAME "RiDetail"
  RtFloat *arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = convert_float_array(s_0, 6);
    if (!arg1) return NULL;
  }
  RiDetail(arg1);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDetailRange (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiDetailRange"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  RiDetailRange(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiGeometricApproximation (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiGeometricApproximation"
  RtToken arg1 = (RtToken) 0 ;
  RtFloat arg2 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiGeometricApproximation(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiOrientation (SCM s_0)
{
#define FUNC_NAME "RiOrientation"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiOrientation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiReverseOrientation ()
{
#define FUNC_NAME "RiReverseOrientation"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiReverseOrientation();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSides (SCM s_0)
{
#define FUNC_NAME "RiSides"
  RtInt arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  RiSides(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiIdentity ()
{
#define FUNC_NAME "RiIdentity"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiIdentity();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTransform (SCM s_0)
{
#define FUNC_NAME "RiTransform"
  RtFloat (*arg1)[4] ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float (*)[4]) convert_float_matrix(s_0, 4, 4);
    if (!arg1) return NULL;
  }
  RiTransform((float (*)[4])arg1);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiConcatTransform (SCM s_0)
{
#define FUNC_NAME "RiConcatTransform"
  RtFloat (*arg1)[4] ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float (*)[4]) convert_float_matrix(s_0, 4, 4);
    if (!arg1) return NULL;
  }
  RiConcatTransform((float (*)[4])arg1);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPerspective (SCM s_0)
{
#define FUNC_NAME "RiPerspective"
  RtFloat arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  RiPerspective(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTranslate (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiTranslate"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  RiTranslate(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiRotate (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiRotate"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  RiRotate(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiScale (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiScale"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  RiScale(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSkew (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "RiSkew"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtFloat arg6 ;
  RtFloat arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = (RtFloat) scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = (RtFloat) scm_num2dbl(s_6, FUNC_NAME);
  }
  RiSkew(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCoordinateSystem (SCM s_0)
{
#define FUNC_NAME "RiCoordinateSystem"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiCoordinateSystem(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCoordSysTransform (SCM s_0)
{
#define FUNC_NAME "RiCoordSysTransform"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiCoordSysTransform(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTransformPoints (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiTransformPoints"
  RtToken arg1 = (RtToken) 0 ;
  RtToken arg2 = (RtToken) 0 ;
  RtInt arg3 ;
  RtPoint *arg4 ;
  RtPoint *result = 0 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtToken)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtInt) scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (float (*)[3])SWIG_MustGetPtr(s_3, SWIGTYPE_p_a_3__float, 4, 0);
  }
  result = (RtPoint *)RiTransformPoints(arg1,arg2,arg3,(float (*)[3])arg4);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_a_3__float, 0);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTransformBegin ()
{
#define FUNC_NAME "RiTransformBegin"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiTransformBegin();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTransformEnd ()
{
#define FUNC_NAME "RiTransformEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiTransformEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiResource (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiResource"
  RtToken arg1 = (RtToken) 0 ;
  RtToken arg2 = (RtToken) 0 ;
  RtInt arg3 ;
  RtToken *arg4 ;
  RtPointer *arg5 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg3 = 0;
    arg4 = (RtToken*) RI_NULL;
    arg5 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtToken)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  if (s_2 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_2,&arg3,&arg4,&arg5))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiResourceV(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiResourceBegin ()
{
#define FUNC_NAME "RiResourceBegin"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiResourceBegin();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiResourceEnd ()
{
#define FUNC_NAME "RiResourceEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiResourceEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiAttribute (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiAttribute"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiAttributeV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPolygon (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiPolygon"
  RtInt arg1 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPolygonV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiGeneralPolygon (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiGeneralPolygon"
  RtInt arg1 ;
  RtInt *arg2 ;
  RtInt arg3 ;
  RtToken *arg4 ;
  RtPointer *arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg3 = 0;
    arg4 = (RtToken*) RI_NULL;
    arg5 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int, 2, 0);
  }
  if (s_2 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_2,&arg3,&arg4,&arg5))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiGeneralPolygonV(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPointsPolygons (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiPointsPolygons"
  RtInt arg1 ;
  RtInt *arg2 ;
  RtInt *arg3 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int, 2, 0);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPointsPolygonsV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPointsGeneralPolygons (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiPointsGeneralPolygons"
  RtInt arg1 ;
  RtInt *arg2 ;
  RtInt *arg3 ;
  RtInt *arg4 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtPointer *arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg5 = 0;
    arg6 = (RtToken*) RI_NULL;
    arg7 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int, 2, 0);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  {
    arg4 = (RtInt *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_int, 4, 0);
  }
  if (s_4 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_4,&arg5,&arg6,&arg7))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPointsGeneralPolygonsV(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBasis (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiBasis"
  RtFloat (*arg1)[4] ;
  RtInt arg2 ;
  RtFloat (*arg3)[4] ;
  RtInt arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (float (*)[4]) convert_float_matrix(s_0, 4, 4);
    if (!arg1) return NULL;
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (float (*)[4])SWIG_MustGetPtr(s_2, SWIGTYPE_p_a_4__float, 3, 0);
  }
  {
    arg4 = (RtInt) scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  RiBasis((float (*)[4])arg1,arg2,(float (*)[4])arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPatch (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiPatch"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPatchV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPatchMesh (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "RiPatchMesh"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken arg3 = (RtToken) 0 ;
  RtInt arg4 ;
  RtToken arg5 = (RtToken) 0 ;
  RtInt arg6 ;
  RtToken *arg7 ;
  RtPointer *arg8 ;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg6 = 0;
    arg7 = (RtToken*) RI_NULL;
    arg8 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (RtInt) scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (RtToken)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  if (s_5 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_5,&arg6,&arg7,&arg8))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPatchMeshV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiNuPatch (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10)
{
#define FUNC_NAME "RiNuPatch"
  RtInt arg1 ;
  RtInt arg2 ;
  RtFloat *arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtInt arg6 ;
  RtInt arg7 ;
  RtFloat *arg8 ;
  RtFloat arg9 ;
  RtFloat arg10 ;
  RtInt arg11 ;
  RtToken *arg12 ;
  RtPointer *arg13 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg11 = 0;
    arg12 = (RtToken*) RI_NULL;
    arg13 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_float, 3, 0);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = (RtInt) scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = (RtInt) scm_num2int(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = (RtFloat *)SWIG_MustGetPtr(s_7, SWIGTYPE_p_float, 8, 0);
  }
  {
    arg9 = (RtFloat) scm_num2dbl(s_8, FUNC_NAME);
  }
  {
    arg10 = (RtFloat) scm_num2dbl(s_9, FUNC_NAME);
  }
  if (s_10 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_10,&arg11,&arg12,&arg13))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiNuPatchV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiNuPatch_rest (SCM rest)
{
SCM arg[11];
SWIG_Guile_GetArgs (arg, rest, 10, 1, "RiNuPatch");
return _wrap_RiNuPatch(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10]);
}
static SCM
_wrap_RiTrimCurve (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9)
{
#define FUNC_NAME "RiTrimCurve"
  RtInt arg1 ;
  RtInt *arg2 ;
  RtInt *arg3 ;
  RtFloat *arg4 ;
  RtFloat *arg5 ;
  RtFloat *arg6 ;
  RtInt *arg7 ;
  RtFloat *arg8 ;
  RtFloat *arg9 ;
  RtFloat *arg10 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_int, 2, 0);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  {
    arg4 = (RtFloat *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_float, 4, 0);
  }
  {
    arg5 = (RtFloat *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_float, 5, 0);
  }
  {
    arg6 = (RtFloat *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_float, 6, 0);
  }
  {
    arg7 = (RtInt *)SWIG_MustGetPtr(s_6, SWIGTYPE_p_int, 7, 0);
  }
  {
    arg8 = (RtFloat *)SWIG_MustGetPtr(s_7, SWIGTYPE_p_float, 8, 0);
  }
  {
    arg9 = (RtFloat *)SWIG_MustGetPtr(s_8, SWIGTYPE_p_float, 9, 0);
  }
  {
    arg10 = (RtFloat *)SWIG_MustGetPtr(s_9, SWIGTYPE_p_float, 10, 0);
  }
  RiTrimCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSubdivisionMesh (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9)
{
#define FUNC_NAME "RiSubdivisionMesh"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtInt *arg3 ;
  RtInt *arg4 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtInt *arg7 ;
  RtInt *arg8 ;
  RtFloat *arg9 ;
  RtInt arg10 ;
  RtToken *arg11 ;
  RtPointer *arg12 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg10 = 0;
    arg11 = (RtToken*) RI_NULL;
    arg12 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  {
    arg4 = (RtInt *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_int, 4, 0);
  }
  {
    arg5 = (RtInt) scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = (RtToken *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_p_char, 6, 0);
  }
  {
    arg7 = (RtInt *)SWIG_MustGetPtr(s_6, SWIGTYPE_p_int, 7, 0);
  }
  {
    arg8 = (RtInt *)SWIG_MustGetPtr(s_7, SWIGTYPE_p_int, 8, 0);
  }
  {
    arg9 = (RtFloat *)SWIG_MustGetPtr(s_8, SWIGTYPE_p_float, 9, 0);
  }
  if (s_9 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_9,&arg10,&arg11,&arg12))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiSubdivisionMeshV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSphere (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiSphere"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtPointer *arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg5 = 0;
    arg6 = (RtToken*) RI_NULL;
    arg7 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  if (s_4 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_4,&arg5,&arg6,&arg7))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiSphereV(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCone (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiCone"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiConeV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCylinder (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiCylinder"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtPointer *arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg5 = 0;
    arg6 = (RtToken*) RI_NULL;
    arg7 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  if (s_4 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_4,&arg5,&arg6,&arg7))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiCylinderV(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiHyperboloid (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiHyperboloid"
  RtFloat *arg1 ;
  RtFloat *arg2 ;
  RtFloat arg3 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = convert_float_array(s_0, 3);
    if (!arg1) return NULL;
  }
  {
    arg2 = (float *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiHyperboloidV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  {
    free(arg1);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiParaboloid (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiParaboloid"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtPointer *arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg5 = 0;
    arg6 = (RtToken*) RI_NULL;
    arg7 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  if (s_4 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_4,&arg5,&arg6,&arg7))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiParaboloidV(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiDisk (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiDisk"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiDiskV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiTorus (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "RiTorus"
  RtFloat arg1 ;
  RtFloat arg2 ;
  RtFloat arg3 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtInt arg6 ;
  RtToken *arg7 ;
  RtPointer *arg8 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg6 = 0;
    arg7 = (RtToken*) RI_NULL;
    arg8 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtFloat) scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = (RtFloat) scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  if (s_5 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_5,&arg6,&arg7,&arg8))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiTorusV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiPoints (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiPoints"
  RtInt arg1 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiPointsV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiCurves (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "RiCurves"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtInt *arg3 ;
  RtToken arg4 = (RtToken) 0 ;
  RtInt arg5 ;
  RtToken *arg6 ;
  RtPointer *arg7 ;
  int must_free1 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg5 = 0;
    arg6 = (RtToken*) RI_NULL;
    arg7 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  {
    arg4 = (RtToken)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  if (s_4 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_4,&arg5,&arg6,&arg7))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiCurvesV(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  if (must_free4 && arg4) SWIG_free(arg4);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiBlobby (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "RiBlobby"
  RtInt arg1 ;
  RtInt arg2 ;
  RtInt *arg3 ;
  RtInt arg4 ;
  RtFloat *arg5 ;
  RtInt arg6 ;
  RtToken *arg7 ;
  RtInt arg8 ;
  RtToken *arg9 ;
  RtPointer *arg10 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg8 = 0;
    arg9 = (RtToken*) RI_NULL;
    arg10 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtInt *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_int, 3, 0);
  }
  {
    arg4 = (RtInt) scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (RtFloat *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_float, 5, 0);
  }
  {
    arg6 = (RtInt) scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = (RtToken *)SWIG_MustGetPtr(s_6, SWIGTYPE_p_p_char, 7, 0);
  }
  if (s_7 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_7,&arg8,&arg9,&arg10))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiBlobbyV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProcedural (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiProcedural"
  RtPointer arg1 = (RtPointer) 0 ;
  RtFloat *arg2 ;
  RtProcSubdivFunc arg3 = (RtProcSubdivFunc) 0 ;
  RtProcFreeFunc arg4 = (RtProcFreeFunc) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (void *) s_0;
  }
  {
    arg2 = convert_float_array(s_1, 6);
    if (!arg2) return NULL;
  }
  {
    arg3 = MakeSCMCallbackRtProcSubdivFunc(s_2);
  }
  {
    arg4 = MakeSCMCallbackRtProcFreeFunc(s_3);
  }
  RiProcedural(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  {
    free(arg2);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProcFree (SCM s_0)
{
#define FUNC_NAME "RiProcFree"
  RtPointer arg1 = (RtPointer) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (void *) s_0;
  }
  RiProcFree(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProcDelayedReadArchive (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiProcDelayedReadArchive"
  RtPointer arg1 = (RtPointer) 0 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (void *) s_0;
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiProcDelayedReadArchive(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProcRunProgram (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiProcRunProgram"
  RtPointer arg1 = (RtPointer) 0 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (void *) s_0;
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiProcRunProgram(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiProcDynamicLoad (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiProcDynamicLoad"
  RtPointer arg1 = (RtPointer) 0 ;
  RtFloat arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (void *) s_0;
  }
  {
    arg2 = (RtFloat) scm_num2dbl(s_1, FUNC_NAME);
  }
  RiProcDynamicLoad(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiGeometry (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiGeometry"
  RtToken arg1 = (RtToken) 0 ;
  RtInt arg2 ;
  RtToken *arg3 ;
  RtPointer *arg4 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg2 = 0;
    arg3 = (RtToken*) RI_NULL;
    arg4 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  if (s_1 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_1,&arg2,&arg3,&arg4))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiGeometryV(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSolidBegin (SCM s_0)
{
#define FUNC_NAME "RiSolidBegin"
  RtToken arg1 = (RtToken) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  RiSolidBegin(arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiSolidEnd ()
{
#define FUNC_NAME "RiSolidEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiSolidEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiObjectBegin ()
{
#define FUNC_NAME "RiObjectBegin"
  RtObjectHandle result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (RtObjectHandle)RiObjectBegin();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_void, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiObjectEnd ()
{
#define FUNC_NAME "RiObjectEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiObjectEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiObjectInstance (SCM s_0)
{
#define FUNC_NAME "RiObjectInstance"
  RtObjectHandle arg1 = (RtObjectHandle) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtObjectHandle)SWIG_MustGetPtr(s_0, NULL, 1, 0);
  }
  RiObjectInstance(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMotionBegin (SCM s_0, SCM s_1)
{
#define FUNC_NAME "RiMotionBegin"
  RtInt arg1 ;
  RtFloat *arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtFloat *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_float, 2, 0);
  }
  RiMotionBeginV(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMotionEnd ()
{
#define FUNC_NAME "RiMotionEnd"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  RiMotionEnd();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeTexture (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "RiMakeTexture"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtToken arg3 = (RtToken) 0 ;
  RtToken arg4 = (RtToken) 0 ;
  RtFilterFunc arg5 = (RtFilterFunc) 0 ;
  RtFloat arg6 ;
  RtFloat arg7 ;
  RtInt arg8 ;
  RtToken *arg9 ;
  RtPointer *arg10 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg8 = 0;
    arg9 = (RtToken*) RI_NULL;
    arg10 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (RtToken)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = MakeSCMCallbackRtFilterFunc(s_4);
  }
  {
    arg6 = (RtFloat) scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = (RtFloat) scm_num2dbl(s_6, FUNC_NAME);
  }
  if (s_7 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_7,&arg8,&arg9,&arg10))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeTextureV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeBump (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "RiMakeBump"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtToken arg3 = (RtToken) 0 ;
  RtToken arg4 = (RtToken) 0 ;
  RtFilterFunc arg5 = (RtFilterFunc) 0 ;
  RtFloat arg6 ;
  RtFloat arg7 ;
  RtInt arg8 ;
  RtToken *arg9 ;
  RtPointer *arg10 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg8 = 0;
    arg9 = (RtToken*) RI_NULL;
    arg10 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtToken)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (RtToken)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = MakeSCMCallbackRtFilterFunc(s_4);
  }
  {
    arg6 = (RtFloat) scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = (RtFloat) scm_num2dbl(s_6, FUNC_NAME);
  }
  if (s_7 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_7,&arg8,&arg9,&arg10))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeBumpV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeLatLongEnvironment (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "RiMakeLatLongEnvironment"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtFilterFunc arg3 = (RtFilterFunc) 0 ;
  RtFloat arg4 ;
  RtFloat arg5 ;
  RtInt arg6 ;
  RtToken *arg7 ;
  RtPointer *arg8 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg6 = 0;
    arg7 = (RtToken*) RI_NULL;
    arg8 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = MakeSCMCallbackRtFilterFunc(s_2);
  }
  {
    arg4 = (RtFloat) scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = (RtFloat) scm_num2dbl(s_4, FUNC_NAME);
  }
  if (s_5 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_5,&arg6,&arg7,&arg8))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeLatLongEnvironmentV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeCubeFaceEnvironment (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11)
{
#define FUNC_NAME "RiMakeCubeFaceEnvironment"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtString arg3 = (RtString) 0 ;
  RtString arg4 = (RtString) 0 ;
  RtString arg5 = (RtString) 0 ;
  RtString arg6 = (RtString) 0 ;
  RtString arg7 = (RtString) 0 ;
  RtFloat arg8 ;
  RtFilterFunc arg9 = (RtFilterFunc) 0 ;
  RtFloat arg10 ;
  RtFloat arg11 ;
  RtInt arg12 ;
  RtToken *arg13 ;
  RtPointer *arg14 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  int must_free7 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg12 = 0;
    arg13 = (RtToken*) RI_NULL;
    arg14 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (RtString)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (RtString)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (RtString)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (RtString)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  {
    arg7 = (RtString)SWIG_scm2str(s_6);
    must_free7 = 1;
  }
  {
    arg8 = (RtFloat) scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = MakeSCMCallbackRtFilterFunc(s_8);
  }
  {
    arg10 = (RtFloat) scm_num2dbl(s_9, FUNC_NAME);
  }
  {
    arg11 = (RtFloat) scm_num2dbl(s_10, FUNC_NAME);
  }
  if (s_11 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_11,&arg12,&arg13,&arg14))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeCubeFaceEnvironmentV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  if (must_free7 && arg7) SWIG_free(arg7);
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeCubeFaceEnvironment_rest (SCM rest)
{
SCM arg[12];
SWIG_Guile_GetArgs (arg, rest, 11, 1, "RiMakeCubeFaceEnvironment");
return _wrap_RiMakeCubeFaceEnvironment(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11]);
}
static SCM
_wrap_RiMakeShadow (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiMakeShadow"
  RtString arg1 = (RtString) 0 ;
  RtString arg2 = (RtString) 0 ;
  RtInt arg3 ;
  RtToken *arg4 ;
  RtPointer *arg5 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg3 = 0;
    arg4 = (RtToken*) RI_NULL;
    arg5 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtString)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtString)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  if (s_2 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_2,&arg3,&arg4,&arg5))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeShadowV(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiMakeOcclusion (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "RiMakeOcclusion"
  RtInt arg1 ;
  RtString *arg2 ;
  RtString arg3 = (RtString) 0 ;
  RtInt arg4 ;
  RtToken *arg5 ;
  RtPointer *arg6 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg4 = 0;
    arg5 = (RtToken*) RI_NULL;
    arg6 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtString *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_p_char, 2, 0);
  }
  {
    arg3 = (RtString)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  if (s_3 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_3,&arg4,&arg5,&arg6))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiMakeOcclusionV(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free3 && arg3) SWIG_free(arg3);
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiErrorHandler (SCM s_0)
{
#define FUNC_NAME "RiErrorHandler"
  RtErrorFunc arg1 = (RtErrorFunc) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtErrorFunc)SWIG_MustGetPtr(s_0, SWIGTYPE_p_f_int_int_p_char__void, 1, 0);
  }
  RiErrorHandler(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiErrorIgnore (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiErrorIgnore"
  RtInt arg1 ;
  RtInt arg2 ;
  RtString arg3 = (RtString) 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtString)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  RiErrorIgnore(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiErrorPrint (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiErrorPrint"
  RtInt arg1 ;
  RtInt arg2 ;
  RtString arg3 = (RtString) 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtString)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  RiErrorPrint(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiErrorAbort (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiErrorAbort"
  RtInt arg1 ;
  RtInt arg2 ;
  RtString arg3 = (RtString) 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (RtInt) scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (RtInt) scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (RtString)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  RiErrorAbort(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_RiReadArchive (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "RiReadArchive"
  RtToken arg1 = (RtToken) 0 ;
  RtArchiveCallback arg2 = (RtArchiveCallback) 0 ;
  RtInt arg3 ;
  RtToken *arg4 ;
  RtPointer *arg5 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    /* need to convert a string list to a token list */
    arg3 = 0;
    arg4 = (RtToken*) RI_NULL;
    arg5 = (RtPointer*) RI_NULL;
  }
  {
    arg1 = (RtToken)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (RtArchiveCallback)SWIG_MustGetPtr(s_1, SWIGTYPE_p_f_p_char_p_char_v_______void, 2, 0);
  }
  if (s_2 != SCM_UNDEFINED) {
    {
      if(!convert_param_list(s_2,&arg3,&arg4,&arg5))
      scm_misc_error (NULL, "unknown value type", SCM_UNSPECIFIED);
    }
  }
  RiReadArchiveV(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_a_3__float = {"_p_a_3__float", "RtPoint *|float (*)[3]|RtColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_4__a_4__float = {"_p_a_4__a_4__float", "RtBasis *|RtMatrix *|float (*)[4][4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_4__float = {"_p_a_4__float", "float (*)[4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_6__float = {"_p_a_6__float", "float (*)[6]|RtBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f___void = {"_p_f___void", "void (*)()|RtFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float_float_float_float__float = {"_p_f_float_float_float_float__float", "RtFilterFunc|float (*)(float,float,float,float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float_int__void = {"_p_f_float_int__void", "void (*)(float,int)|RtProgressFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_int_p_char__void = {"_p_f_int_int_p_char__void", "void (*)(int,int,char *)|RtErrorFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_char_p_char_v_______void = {"_p_f_p_char_p_char_v_______void", "void (*)(char *,char *,...)|RtArchiveCallback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)|RtProcFreeFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_float__void = {"_p_f_p_void_float__void", "void (*)(void *,float)|RtProcSubdivFunc", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|RtFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|RtInt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **|RtString *|RtToken *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_f_int_int_p_char__void = {"_p_p_f_int_int_p_char__void", "void (**)(int,int,char *)|RtErrorHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "RtPointer *|RtObjectHandle *|RtLightHandle *|RtContextHandle *|void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|RtBoolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "SCM *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "RtContextHandle|RtLightHandle|RtObjectHandle|RtVoid *|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_a_3__float,
  &_swigt__p_a_4__a_4__float,
  &_swigt__p_a_4__float,
  &_swigt__p_a_6__float,
  &_swigt__p_f___void,
  &_swigt__p_f_float_float_float_float__float,
  &_swigt__p_f_float_int__void,
  &_swigt__p_f_int_int_p_char__void,
  &_swigt__p_f_p_char_p_char_v_______void,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_p_void_float__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_p_f_int_int_p_char__void,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_unsigned_long,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_a_3__float[] = {  {&_swigt__p_a_3__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__a_4__float[] = {  {&_swigt__p_a_4__a_4__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__float[] = {  {&_swigt__p_a_4__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_6__float[] = {  {&_swigt__p_a_6__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f___void[] = {  {&_swigt__p_f___void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float_float_float_float__float[] = {  {&_swigt__p_f_float_float_float_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float_int__void[] = {  {&_swigt__p_f_float_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int_p_char__void[] = {  {&_swigt__p_f_int_int_p_char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_char_p_char_v_______void[] = {  {&_swigt__p_f_p_char_p_char_v_______void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_float__void[] = {  {&_swigt__p_f_p_void_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_f_int_int_p_char__void[] = {  {&_swigt__p_p_f_int_int_p_char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_a_3__float,
  _swigc__p_a_4__a_4__float,
  _swigc__p_a_4__float,
  _swigc__p_a_6__float,
  _swigc__p_f___void,
  _swigc__p_f_float_float_float_float__float,
  _swigc__p_f_float_int__void,
  _swigc__p_f_int_int_p_char__void,
  _swigc__p_f_p_char_p_char_v_______void,
  _swigc__p_f_p_void__void,
  _swigc__p_f_p_void_float__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_p_f_int_int_p_char__void,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_unsigned_long,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


SWIG_GUILE_INIT_STATIC void
SWIG_init(void)
{
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  scm_c_define_gsubr("tokenCast", 1, 0, 0, (swig_guile_proc) _wrap_tokenCast);
  scm_c_define_gsubr("TrampolineRtFunc", 1, 0, 0, (swig_guile_proc) _wrap_TrampolineRtFunc);
  scm_c_define_gsubr("MakeSCMCallbackRtFunc", 1, 0, 0, (swig_guile_proc) _wrap_MakeSCMCallbackRtFunc);
  scm_c_define_gsubr("TrampolineRtProgressFunc", 3, 0, 0, (swig_guile_proc) _wrap_TrampolineRtProgressFunc);
  scm_c_define_gsubr("MakeSCMCallbackRtProgressFunc", 1, 0, 0, (swig_guile_proc) _wrap_MakeSCMCallbackRtProgressFunc);
  scm_c_define_gsubr("TrampolineRtProcSubdivFunc", 3, 0, 0, (swig_guile_proc) _wrap_TrampolineRtProcSubdivFunc);
  scm_c_define_gsubr("MakeSCMCallbackRtProcSubdivFunc", 1, 0, 0, (swig_guile_proc) _wrap_MakeSCMCallbackRtProcSubdivFunc);
  scm_c_define_gsubr("TrampolineRtProcFreeFunc", 2, 0, 0, (swig_guile_proc) _wrap_TrampolineRtProcFreeFunc);
  scm_c_define_gsubr("MakeSCMCallbackRtProcFreeFunc", 1, 0, 0, (swig_guile_proc) _wrap_MakeSCMCallbackRtProcFreeFunc);
  scm_c_define_gsubr("TrampolineRtFilterFunc", 5, 0, 0, (swig_guile_proc) _wrap_TrampolineRtFilterFunc);
  scm_c_define_gsubr("MakeSCMCallbackRtFilterFunc", 1, 0, 0, (swig_guile_proc) _wrap_MakeSCMCallbackRtFilterFunc);
  scm_c_define_gsubr("AQSIS-COMPILER-H-INCLUDED", 0, 0, 0, (swig_guile_proc) _wrap_AQSIS_COMPILER_H_INCLUDED);
  scm_c_define_gsubr("AQSIS-SYSTEM-POSIX", 0, 0, 0, (swig_guile_proc) _wrap_AQSIS_SYSTEM_POSIX);
  scm_c_define_gsubr("AQSIS-COMPILER-GCC", 0, 0, 0, (swig_guile_proc) _wrap_AQSIS_COMPILER_GCC);
  scm_c_define_gsubr("SHARED-LIBRARY-SUFFIX", 0, 0, 0, (swig_guile_proc) _wrap_SHARED_LIBRARY_SUFFIX);
  scm_c_define_gsubr("RI-FALSE", 0, 0, 0, (swig_guile_proc) _wrap_RI_FALSE);
  scm_c_define_gsubr("RI-TRUE", 0, 0, 0, (swig_guile_proc) _wrap_RI_TRUE);
  scm_c_define_gsubr("RI-PI", 0, 0, 0, (swig_guile_proc) _wrap_RI_PI);
  scm_c_define_gsubr("RI-PIO2", 0, 0, 0, (swig_guile_proc) _wrap_RI_PIO2);
  scm_c_define_gsubr("RI-SHADER-EXTENSION", 0, 0, 0, (swig_guile_proc) _wrap_RI_SHADER_EXTENSION);
  {
    SCM p = scm_c_define_gsubr("RI-FRAMEBUFFER", 0, 1, 0, (swig_guile_proc) _wrap_RI_FRAMEBUFFER);
    scm_c_define("RI-FRAMEBUFFER", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-FILE", 0, 1, 0, (swig_guile_proc) _wrap_RI_FILE);
    scm_c_define("RI-FILE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RGB", 0, 1, 0, (swig_guile_proc) _wrap_RI_RGB);
    scm_c_define("RI-RGB", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RGBA", 0, 1, 0, (swig_guile_proc) _wrap_RI_RGBA);
    scm_c_define("RI-RGBA", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RGBZ", 0, 1, 0, (swig_guile_proc) _wrap_RI_RGBZ);
    scm_c_define("RI-RGBZ", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RGBAZ", 0, 1, 0, (swig_guile_proc) _wrap_RI_RGBAZ);
    scm_c_define("RI-RGBAZ", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-A", 0, 1, 0, (swig_guile_proc) _wrap_RI_A);
    scm_c_define("RI-A", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-Z", 0, 1, 0, (swig_guile_proc) _wrap_RI_Z);
    scm_c_define("RI-Z", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-AZ", 0, 1, 0, (swig_guile_proc) _wrap_RI_AZ);
    scm_c_define("RI-AZ", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-MERGE", 0, 1, 0, (swig_guile_proc) _wrap_RI_MERGE);
    scm_c_define("RI-MERGE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-ORIGIN", 0, 1, 0, (swig_guile_proc) _wrap_RI_ORIGIN);
    scm_c_define("RI-ORIGIN", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PERSPECTIVE", 0, 1, 0, (swig_guile_proc) _wrap_RI_PERSPECTIVE);
    scm_c_define("RI-PERSPECTIVE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-ORTHOGRAPHIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_ORTHOGRAPHIC);
    scm_c_define("RI-ORTHOGRAPHIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-HIDDEN", 0, 1, 0, (swig_guile_proc) _wrap_RI_HIDDEN);
    scm_c_define("RI-HIDDEN", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PAINT", 0, 1, 0, (swig_guile_proc) _wrap_RI_PAINT);
    scm_c_define("RI-PAINT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CONSTANT", 0, 1, 0, (swig_guile_proc) _wrap_RI_CONSTANT);
    scm_c_define("RI-CONSTANT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SMOOTH", 0, 1, 0, (swig_guile_proc) _wrap_RI_SMOOTH);
    scm_c_define("RI-SMOOTH", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-FLATNESS", 0, 1, 0, (swig_guile_proc) _wrap_RI_FLATNESS);
    scm_c_define("RI-FLATNESS", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-FOV", 0, 1, 0, (swig_guile_proc) _wrap_RI_FOV);
    scm_c_define("RI-FOV", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-AMBIENTLIGHT", 0, 1, 0, (swig_guile_proc) _wrap_RI_AMBIENTLIGHT);
    scm_c_define("RI-AMBIENTLIGHT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-POINTLIGHT", 0, 1, 0, (swig_guile_proc) _wrap_RI_POINTLIGHT);
    scm_c_define("RI-POINTLIGHT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-DISTANTLIGHT", 0, 1, 0, (swig_guile_proc) _wrap_RI_DISTANTLIGHT);
    scm_c_define("RI-DISTANTLIGHT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SPOTLIGHT", 0, 1, 0, (swig_guile_proc) _wrap_RI_SPOTLIGHT);
    scm_c_define("RI-SPOTLIGHT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-INTENSITY", 0, 1, 0, (swig_guile_proc) _wrap_RI_INTENSITY);
    scm_c_define("RI-INTENSITY", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-LIGHTCOLOR", 0, 1, 0, (swig_guile_proc) _wrap_RI_LIGHTCOLOR);
    scm_c_define("RI-LIGHTCOLOR", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-FROM", 0, 1, 0, (swig_guile_proc) _wrap_RI_FROM);
    scm_c_define("RI-FROM", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-TO", 0, 1, 0, (swig_guile_proc) _wrap_RI_TO);
    scm_c_define("RI-TO", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CONEANGLE", 0, 1, 0, (swig_guile_proc) _wrap_RI_CONEANGLE);
    scm_c_define("RI-CONEANGLE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CONEDELTAANGLE", 0, 1, 0, (swig_guile_proc) _wrap_RI_CONEDELTAANGLE);
    scm_c_define("RI-CONEDELTAANGLE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BEAMDISTRIBUTION", 0, 1, 0, (swig_guile_proc) _wrap_RI_BEAMDISTRIBUTION);
    scm_c_define("RI-BEAMDISTRIBUTION", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-MATTE", 0, 1, 0, (swig_guile_proc) _wrap_RI_MATTE);
    scm_c_define("RI-MATTE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-METAL", 0, 1, 0, (swig_guile_proc) _wrap_RI_METAL);
    scm_c_define("RI-METAL", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PLASTIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_PLASTIC);
    scm_c_define("RI-PLASTIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SHINYMETAL", 0, 1, 0, (swig_guile_proc) _wrap_RI_SHINYMETAL);
    scm_c_define("RI-SHINYMETAL", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PAINTEDPLASTIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_PAINTEDPLASTIC);
    scm_c_define("RI-PAINTEDPLASTIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-KA", 0, 1, 0, (swig_guile_proc) _wrap_RI_KA);
    scm_c_define("RI-KA", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-KD", 0, 1, 0, (swig_guile_proc) _wrap_RI_KD);
    scm_c_define("RI-KD", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-KS", 0, 1, 0, (swig_guile_proc) _wrap_RI_KS);
    scm_c_define("RI-KS", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-ROUGHNESS", 0, 1, 0, (swig_guile_proc) _wrap_RI_ROUGHNESS);
    scm_c_define("RI-ROUGHNESS", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-KR", 0, 1, 0, (swig_guile_proc) _wrap_RI_KR);
    scm_c_define("RI-KR", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-TEXTURENAME", 0, 1, 0, (swig_guile_proc) _wrap_RI_TEXTURENAME);
    scm_c_define("RI-TEXTURENAME", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SPECULARCOLOR", 0, 1, 0, (swig_guile_proc) _wrap_RI_SPECULARCOLOR);
    scm_c_define("RI-SPECULARCOLOR", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-DEPTHCUE", 0, 1, 0, (swig_guile_proc) _wrap_RI_DEPTHCUE);
    scm_c_define("RI-DEPTHCUE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-FOG", 0, 1, 0, (swig_guile_proc) _wrap_RI_FOG);
    scm_c_define("RI-FOG", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BUMPY", 0, 1, 0, (swig_guile_proc) _wrap_RI_BUMPY);
    scm_c_define("RI-BUMPY", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-MINDISTANCE", 0, 1, 0, (swig_guile_proc) _wrap_RI_MINDISTANCE);
    scm_c_define("RI-MINDISTANCE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-MAXDISTANCE", 0, 1, 0, (swig_guile_proc) _wrap_RI_MAXDISTANCE);
    scm_c_define("RI-MAXDISTANCE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BACKGROUND", 0, 1, 0, (swig_guile_proc) _wrap_RI_BACKGROUND);
    scm_c_define("RI-BACKGROUND", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-DISTANCE", 0, 1, 0, (swig_guile_proc) _wrap_RI_DISTANCE);
    scm_c_define("RI-DISTANCE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-AMPLITUDE", 0, 1, 0, (swig_guile_proc) _wrap_RI_AMPLITUDE);
    scm_c_define("RI-AMPLITUDE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RASTER", 0, 1, 0, (swig_guile_proc) _wrap_RI_RASTER);
    scm_c_define("RI-RASTER", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SCREEN", 0, 1, 0, (swig_guile_proc) _wrap_RI_SCREEN);
    scm_c_define("RI-SCREEN", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CAMERA", 0, 1, 0, (swig_guile_proc) _wrap_RI_CAMERA);
    scm_c_define("RI-CAMERA", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-WORLD", 0, 1, 0, (swig_guile_proc) _wrap_RI_WORLD);
    scm_c_define("RI-WORLD", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-OBJECT", 0, 1, 0, (swig_guile_proc) _wrap_RI_OBJECT);
    scm_c_define("RI-OBJECT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-INSIDE", 0, 1, 0, (swig_guile_proc) _wrap_RI_INSIDE);
    scm_c_define("RI-INSIDE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-OUTSIDE", 0, 1, 0, (swig_guile_proc) _wrap_RI_OUTSIDE);
    scm_c_define("RI-OUTSIDE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-LH", 0, 1, 0, (swig_guile_proc) _wrap_RI_LH);
    scm_c_define("RI-LH", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-RH", 0, 1, 0, (swig_guile_proc) _wrap_RI_RH);
    scm_c_define("RI-RH", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-P", 0, 1, 0, (swig_guile_proc) _wrap_RI_P);
    scm_c_define("RI-P", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PZ", 0, 1, 0, (swig_guile_proc) _wrap_RI_PZ);
    scm_c_define("RI-PZ", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PW", 0, 1, 0, (swig_guile_proc) _wrap_RI_PW);
    scm_c_define("RI-PW", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-N", 0, 1, 0, (swig_guile_proc) _wrap_RI_N);
    scm_c_define("RI-N", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-NP", 0, 1, 0, (swig_guile_proc) _wrap_RI_NP);
    scm_c_define("RI-NP", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CS", 0, 1, 0, (swig_guile_proc) _wrap_RI_CS);
    scm_c_define("RI-CS", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-OS", 0, 1, 0, (swig_guile_proc) _wrap_RI_OS);
    scm_c_define("RI-OS", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-S", 0, 1, 0, (swig_guile_proc) _wrap_RI_S);
    scm_c_define("RI-S", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-T", 0, 1, 0, (swig_guile_proc) _wrap_RI_T);
    scm_c_define("RI-T", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-ST", 0, 1, 0, (swig_guile_proc) _wrap_RI_ST);
    scm_c_define("RI-ST", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BILINEAR", 0, 1, 0, (swig_guile_proc) _wrap_RI_BILINEAR);
    scm_c_define("RI-BILINEAR", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BICUBIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_BICUBIC);
    scm_c_define("RI-BICUBIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-LINEAR", 0, 1, 0, (swig_guile_proc) _wrap_RI_LINEAR);
    scm_c_define("RI-LINEAR", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CUBIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_CUBIC);
    scm_c_define("RI-CUBIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PRIMITIVE", 0, 1, 0, (swig_guile_proc) _wrap_RI_PRIMITIVE);
    scm_c_define("RI-PRIMITIVE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-INTERSECTION", 0, 1, 0, (swig_guile_proc) _wrap_RI_INTERSECTION);
    scm_c_define("RI-INTERSECTION", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-UNION", 0, 1, 0, (swig_guile_proc) _wrap_RI_UNION);
    scm_c_define("RI-UNION", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-DIFFERENCE", 0, 1, 0, (swig_guile_proc) _wrap_RI_DIFFERENCE);
    scm_c_define("RI-DIFFERENCE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-WRAP", 0, 1, 0, (swig_guile_proc) _wrap_RI_WRAP);
    scm_c_define("RI-WRAP", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-NOWRAP", 0, 1, 0, (swig_guile_proc) _wrap_RI_NOWRAP);
    scm_c_define("RI-NOWRAP", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PERIODIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_PERIODIC);
    scm_c_define("RI-PERIODIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-NONPERIODIC", 0, 1, 0, (swig_guile_proc) _wrap_RI_NONPERIODIC);
    scm_c_define("RI-NONPERIODIC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CLAMP", 0, 1, 0, (swig_guile_proc) _wrap_RI_CLAMP);
    scm_c_define("RI-CLAMP", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-BLACK", 0, 1, 0, (swig_guile_proc) _wrap_RI_BLACK);
    scm_c_define("RI-BLACK", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-IGNORE", 0, 1, 0, (swig_guile_proc) _wrap_RI_IGNORE);
    scm_c_define("RI-IGNORE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-PRINT", 0, 1, 0, (swig_guile_proc) _wrap_RI_PRINT);
    scm_c_define("RI-PRINT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-ABORT", 0, 1, 0, (swig_guile_proc) _wrap_RI_ABORT);
    scm_c_define("RI-ABORT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-HANDLER", 0, 1, 0, (swig_guile_proc) _wrap_RI_HANDLER);
    scm_c_define("RI-HANDLER", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-IDENTIFIER", 0, 1, 0, (swig_guile_proc) _wrap_RI_IDENTIFIER);
    scm_c_define("RI-IDENTIFIER", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-NAME", 0, 1, 0, (swig_guile_proc) _wrap_RI_NAME);
    scm_c_define("RI-NAME", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-COMMENT", 0, 1, 0, (swig_guile_proc) _wrap_RI_COMMENT);
    scm_c_define("RI-COMMENT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-STRUCTURE", 0, 1, 0, (swig_guile_proc) _wrap_RI_STRUCTURE);
    scm_c_define("RI-STRUCTURE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-VERBATIM", 0, 1, 0, (swig_guile_proc) _wrap_RI_VERBATIM);
    scm_c_define("RI-VERBATIM", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-WIDTH", 0, 1, 0, (swig_guile_proc) _wrap_RI_WIDTH);
    scm_c_define("RI-WIDTH", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CONSTANTWIDTH", 0, 1, 0, (swig_guile_proc) _wrap_RI_CONSTANTWIDTH);
    scm_c_define("RI-CONSTANTWIDTH", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-CURRENT", 0, 1, 0, (swig_guile_proc) _wrap_RI_CURRENT);
    scm_c_define("RI-CURRENT", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-SHADER", 0, 1, 0, (swig_guile_proc) _wrap_RI_SHADER);
    scm_c_define("RI-SHADER", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-EYE", 0, 1, 0, (swig_guile_proc) _wrap_RI_EYE);
    scm_c_define("RI-EYE", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RI-NDC", 0, 1, 0, (swig_guile_proc) _wrap_RI_NDC);
    scm_c_define("RI-NDC", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiBezierBasis", 0, 1, 0, (swig_guile_proc) _wrap_RiBezierBasis);
    scm_c_define("RiBezierBasis", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiBSplineBasis", 0, 1, 0, (swig_guile_proc) _wrap_RiBSplineBasis);
    scm_c_define("RiBSplineBasis", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiCatmullRomBasis", 0, 1, 0, (swig_guile_proc) _wrap_RiCatmullRomBasis);
    scm_c_define("RiCatmullRomBasis", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiHermiteBasis", 0, 1, 0, (swig_guile_proc) _wrap_RiHermiteBasis);
    scm_c_define("RiHermiteBasis", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiPowerBasis", 0, 1, 0, (swig_guile_proc) _wrap_RiPowerBasis);
    scm_c_define("RiPowerBasis", scm_make_procedure_with_setter(p, p)); 
  }
  {
    SCM p = scm_c_define_gsubr("RiLastError", 0, 1, 0, (swig_guile_proc) _wrap_RiLastError);
    scm_c_define("RiLastError", scm_make_procedure_with_setter(p, p)); 
  }
  scm_c_define_gsubr("BasisFromName", 2, 0, 0, (swig_guile_proc) _wrap_BasisFromName);
  scm_c_define_gsubr("RiProgressHandler", 1, 0, 0, (swig_guile_proc) _wrap_RiProgressHandler);
  scm_c_define_gsubr("RiPreRenderFunction", 1, 0, 0, (swig_guile_proc) _wrap_RiPreRenderFunction);
  scm_c_define_gsubr("RiPreWorldFunction", 1, 0, 0, (swig_guile_proc) _wrap_RiPreWorldFunction);
  scm_c_define_gsubr("RiDeclare", 2, 0, 0, (swig_guile_proc) _wrap_RiDeclare);
  scm_c_define_gsubr("RiBegin", 1, 0, 0, (swig_guile_proc) _wrap_RiBegin);
  scm_c_define_gsubr("RiEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiEnd);
  scm_c_define_gsubr("RiGetContext", 0, 0, 0, (swig_guile_proc) _wrap_RiGetContext);
  scm_c_define_gsubr("RiContext", 1, 0, 0, (swig_guile_proc) _wrap_RiContext);
  scm_c_define_gsubr("RiFrameBegin", 1, 0, 0, (swig_guile_proc) _wrap_RiFrameBegin);
  scm_c_define_gsubr("RiFrameEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiFrameEnd);
  scm_c_define_gsubr("RiWorldBegin", 0, 0, 0, (swig_guile_proc) _wrap_RiWorldBegin);
  scm_c_define_gsubr("RiWorldEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiWorldEnd);
  scm_c_define_gsubr("RiIfBegin", 1, 0, 0, (swig_guile_proc) _wrap_RiIfBegin);
  scm_c_define_gsubr("RiElseIf", 1, 0, 0, (swig_guile_proc) _wrap_RiElseIf);
  scm_c_define_gsubr("RiElse", 0, 0, 0, (swig_guile_proc) _wrap_RiElse);
  scm_c_define_gsubr("RiIfEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiIfEnd);
  scm_c_define_gsubr("RiFormat", 3, 0, 0, (swig_guile_proc) _wrap_RiFormat);
  scm_c_define_gsubr("RiFrameAspectRatio", 1, 0, 0, (swig_guile_proc) _wrap_RiFrameAspectRatio);
  scm_c_define_gsubr("RiScreenWindow", 4, 0, 0, (swig_guile_proc) _wrap_RiScreenWindow);
  scm_c_define_gsubr("RiCropWindow", 4, 0, 0, (swig_guile_proc) _wrap_RiCropWindow);
  scm_c_define_gsubr("RiProjection", 1, 1, 0, (swig_guile_proc) _wrap_RiProjection);
  scm_c_define_gsubr("RiClipping", 2, 0, 0, (swig_guile_proc) _wrap_RiClipping);
  scm_c_define_gsubr("RiClippingPlane", 6, 0, 0, (swig_guile_proc) _wrap_RiClippingPlane);
  scm_c_define_gsubr("RiDepthOfField", 3, 0, 0, (swig_guile_proc) _wrap_RiDepthOfField);
  scm_c_define_gsubr("RiShutter", 2, 0, 0, (swig_guile_proc) _wrap_RiShutter);
  scm_c_define_gsubr("RiPixelVariance", 1, 0, 0, (swig_guile_proc) _wrap_RiPixelVariance);
  scm_c_define_gsubr("RiPixelSamples", 2, 0, 0, (swig_guile_proc) _wrap_RiPixelSamples);
  scm_c_define_gsubr("RiPixelFilter", 3, 0, 0, (swig_guile_proc) _wrap_RiPixelFilter);
  scm_c_define_gsubr("RiExposure", 2, 0, 0, (swig_guile_proc) _wrap_RiExposure);
  scm_c_define_gsubr("RiImager", 1, 1, 0, (swig_guile_proc) _wrap_RiImager);
  scm_c_define_gsubr("RiQuantize", 5, 0, 0, (swig_guile_proc) _wrap_RiQuantize);
  scm_c_define_gsubr("RiDisplay", 3, 1, 0, (swig_guile_proc) _wrap_RiDisplay);
  scm_c_define_gsubr("RiGaussianFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiGaussianFilter);
  scm_c_define_gsubr("RiBoxFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiBoxFilter);
  scm_c_define_gsubr("RiMitchellFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiMitchellFilter);
  scm_c_define_gsubr("RiTriangleFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiTriangleFilter);
  scm_c_define_gsubr("RiCatmullRomFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiCatmullRomFilter);
  scm_c_define_gsubr("RiSincFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiSincFilter);
  scm_c_define_gsubr("RiDiskFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiDiskFilter);
  scm_c_define_gsubr("RiBesselFilter", 4, 0, 0, (swig_guile_proc) _wrap_RiBesselFilter);
  scm_c_define_gsubr("RiHider", 1, 1, 0, (swig_guile_proc) _wrap_RiHider);
  scm_c_define_gsubr("RiColorSamples", 3, 0, 0, (swig_guile_proc) _wrap_RiColorSamples);
  scm_c_define_gsubr("RiRelativeDetail", 1, 0, 0, (swig_guile_proc) _wrap_RiRelativeDetail);
  scm_c_define_gsubr("RiOption", 1, 1, 0, (swig_guile_proc) _wrap_RiOption);
  scm_c_define_gsubr("RiAttributeBegin", 0, 0, 0, (swig_guile_proc) _wrap_RiAttributeBegin);
  scm_c_define_gsubr("RiAttributeEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiAttributeEnd);
  scm_c_define_gsubr("RiColor", 1, 0, 0, (swig_guile_proc) _wrap_RiColor);
  scm_c_define_gsubr("RiOpacity", 1, 0, 0, (swig_guile_proc) _wrap_RiOpacity);
  scm_c_define_gsubr("RiTextureCoordinates", 8, 0, 0, (swig_guile_proc) _wrap_RiTextureCoordinates);
  scm_c_define_gsubr("RiLightSource", 1, 1, 0, (swig_guile_proc) _wrap_RiLightSource);
  scm_c_define_gsubr("RiAreaLightSource", 1, 1, 0, (swig_guile_proc) _wrap_RiAreaLightSource);
  scm_c_define_gsubr("RiIlluminate", 2, 0, 0, (swig_guile_proc) _wrap_RiIlluminate);
  scm_c_define_gsubr("RiSurface", 1, 1, 0, (swig_guile_proc) _wrap_RiSurface);
  scm_c_define_gsubr("RiDeformation", 1, 1, 0, (swig_guile_proc) _wrap_RiDeformation);
  scm_c_define_gsubr("RiDisplacement", 1, 1, 0, (swig_guile_proc) _wrap_RiDisplacement);
  scm_c_define_gsubr("RiAtmosphere", 1, 1, 0, (swig_guile_proc) _wrap_RiAtmosphere);
  scm_c_define_gsubr("RiInterior", 1, 1, 0, (swig_guile_proc) _wrap_RiInterior);
  scm_c_define_gsubr("RiExterior", 1, 1, 0, (swig_guile_proc) _wrap_RiExterior);
  scm_c_define_gsubr("RiShaderLayer", 3, 1, 0, (swig_guile_proc) _wrap_RiShaderLayer);
  scm_c_define_gsubr("RiConnectShaderLayers", 5, 0, 0, (swig_guile_proc) _wrap_RiConnectShaderLayers);
  scm_c_define_gsubr("RiShadingRate", 1, 0, 0, (swig_guile_proc) _wrap_RiShadingRate);
  scm_c_define_gsubr("RiShadingInterpolation", 1, 0, 0, (swig_guile_proc) _wrap_RiShadingInterpolation);
  scm_c_define_gsubr("RiMatte", 1, 0, 0, (swig_guile_proc) _wrap_RiMatte);
  scm_c_define_gsubr("RiBound", 1, 0, 0, (swig_guile_proc) _wrap_RiBound);
  scm_c_define_gsubr("RiDetail", 1, 0, 0, (swig_guile_proc) _wrap_RiDetail);
  scm_c_define_gsubr("RiDetailRange", 4, 0, 0, (swig_guile_proc) _wrap_RiDetailRange);
  scm_c_define_gsubr("RiGeometricApproximation", 2, 0, 0, (swig_guile_proc) _wrap_RiGeometricApproximation);
  scm_c_define_gsubr("RiOrientation", 1, 0, 0, (swig_guile_proc) _wrap_RiOrientation);
  scm_c_define_gsubr("RiReverseOrientation", 0, 0, 0, (swig_guile_proc) _wrap_RiReverseOrientation);
  scm_c_define_gsubr("RiSides", 1, 0, 0, (swig_guile_proc) _wrap_RiSides);
  scm_c_define_gsubr("RiIdentity", 0, 0, 0, (swig_guile_proc) _wrap_RiIdentity);
  scm_c_define_gsubr("RiTransform", 1, 0, 0, (swig_guile_proc) _wrap_RiTransform);
  scm_c_define_gsubr("RiConcatTransform", 1, 0, 0, (swig_guile_proc) _wrap_RiConcatTransform);
  scm_c_define_gsubr("RiPerspective", 1, 0, 0, (swig_guile_proc) _wrap_RiPerspective);
  scm_c_define_gsubr("RiTranslate", 3, 0, 0, (swig_guile_proc) _wrap_RiTranslate);
  scm_c_define_gsubr("RiRotate", 4, 0, 0, (swig_guile_proc) _wrap_RiRotate);
  scm_c_define_gsubr("RiScale", 3, 0, 0, (swig_guile_proc) _wrap_RiScale);
  scm_c_define_gsubr("RiSkew", 7, 0, 0, (swig_guile_proc) _wrap_RiSkew);
  scm_c_define_gsubr("RiCoordinateSystem", 1, 0, 0, (swig_guile_proc) _wrap_RiCoordinateSystem);
  scm_c_define_gsubr("RiCoordSysTransform", 1, 0, 0, (swig_guile_proc) _wrap_RiCoordSysTransform);
  scm_c_define_gsubr("RiTransformPoints", 4, 0, 0, (swig_guile_proc) _wrap_RiTransformPoints);
  scm_c_define_gsubr("RiTransformBegin", 0, 0, 0, (swig_guile_proc) _wrap_RiTransformBegin);
  scm_c_define_gsubr("RiTransformEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiTransformEnd);
  scm_c_define_gsubr("RiResource", 2, 1, 0, (swig_guile_proc) _wrap_RiResource);
  scm_c_define_gsubr("RiResourceBegin", 0, 0, 0, (swig_guile_proc) _wrap_RiResourceBegin);
  scm_c_define_gsubr("RiResourceEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiResourceEnd);
  scm_c_define_gsubr("RiAttribute", 1, 1, 0, (swig_guile_proc) _wrap_RiAttribute);
  scm_c_define_gsubr("RiPolygon", 1, 1, 0, (swig_guile_proc) _wrap_RiPolygon);
  scm_c_define_gsubr("RiGeneralPolygon", 2, 1, 0, (swig_guile_proc) _wrap_RiGeneralPolygon);
  scm_c_define_gsubr("RiPointsPolygons", 3, 1, 0, (swig_guile_proc) _wrap_RiPointsPolygons);
  scm_c_define_gsubr("RiPointsGeneralPolygons", 4, 1, 0, (swig_guile_proc) _wrap_RiPointsGeneralPolygons);
  scm_c_define_gsubr("RiBasis", 4, 0, 0, (swig_guile_proc) _wrap_RiBasis);
  scm_c_define_gsubr("RiPatch", 1, 1, 0, (swig_guile_proc) _wrap_RiPatch);
  scm_c_define_gsubr("RiPatchMesh", 5, 1, 0, (swig_guile_proc) _wrap_RiPatchMesh);
  scm_c_define_gsubr("RiNuPatch", 0, 0, 1, (swig_guile_proc) _wrap_RiNuPatch_rest);
  scm_c_define_gsubr("RiTrimCurve", 10, 0, 0, (swig_guile_proc) _wrap_RiTrimCurve);
  scm_c_define_gsubr("RiSubdivisionMesh", 9, 1, 0, (swig_guile_proc) _wrap_RiSubdivisionMesh);
  scm_c_define_gsubr("RiSphere", 4, 1, 0, (swig_guile_proc) _wrap_RiSphere);
  scm_c_define_gsubr("RiCone", 3, 1, 0, (swig_guile_proc) _wrap_RiCone);
  scm_c_define_gsubr("RiCylinder", 4, 1, 0, (swig_guile_proc) _wrap_RiCylinder);
  scm_c_define_gsubr("RiHyperboloid", 3, 1, 0, (swig_guile_proc) _wrap_RiHyperboloid);
  scm_c_define_gsubr("RiParaboloid", 4, 1, 0, (swig_guile_proc) _wrap_RiParaboloid);
  scm_c_define_gsubr("RiDisk", 3, 1, 0, (swig_guile_proc) _wrap_RiDisk);
  scm_c_define_gsubr("RiTorus", 5, 1, 0, (swig_guile_proc) _wrap_RiTorus);
  scm_c_define_gsubr("RiPoints", 1, 1, 0, (swig_guile_proc) _wrap_RiPoints);
  scm_c_define_gsubr("RiCurves", 4, 1, 0, (swig_guile_proc) _wrap_RiCurves);
  scm_c_define_gsubr("RiBlobby", 7, 1, 0, (swig_guile_proc) _wrap_RiBlobby);
  scm_c_define_gsubr("RiProcedural", 4, 0, 0, (swig_guile_proc) _wrap_RiProcedural);
  scm_c_define_gsubr("RiProcFree", 1, 0, 0, (swig_guile_proc) _wrap_RiProcFree);
  scm_c_define_gsubr("RiProcDelayedReadArchive", 2, 0, 0, (swig_guile_proc) _wrap_RiProcDelayedReadArchive);
  scm_c_define_gsubr("RiProcRunProgram", 2, 0, 0, (swig_guile_proc) _wrap_RiProcRunProgram);
  scm_c_define_gsubr("RiProcDynamicLoad", 2, 0, 0, (swig_guile_proc) _wrap_RiProcDynamicLoad);
  scm_c_define_gsubr("RiGeometry", 1, 1, 0, (swig_guile_proc) _wrap_RiGeometry);
  scm_c_define_gsubr("RiSolidBegin", 1, 0, 0, (swig_guile_proc) _wrap_RiSolidBegin);
  scm_c_define_gsubr("RiSolidEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiSolidEnd);
  scm_c_define_gsubr("RiObjectBegin", 0, 0, 0, (swig_guile_proc) _wrap_RiObjectBegin);
  scm_c_define_gsubr("RiObjectEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiObjectEnd);
  scm_c_define_gsubr("RiObjectInstance", 1, 0, 0, (swig_guile_proc) _wrap_RiObjectInstance);
  scm_c_define_gsubr("RiMotionBegin", 2, 0, 0, (swig_guile_proc) _wrap_RiMotionBegin);
  scm_c_define_gsubr("RiMotionEnd", 0, 0, 0, (swig_guile_proc) _wrap_RiMotionEnd);
  scm_c_define_gsubr("RiMakeTexture", 7, 1, 0, (swig_guile_proc) _wrap_RiMakeTexture);
  scm_c_define_gsubr("RiMakeBump", 7, 1, 0, (swig_guile_proc) _wrap_RiMakeBump);
  scm_c_define_gsubr("RiMakeLatLongEnvironment", 5, 1, 0, (swig_guile_proc) _wrap_RiMakeLatLongEnvironment);
  scm_c_define_gsubr("RiMakeCubeFaceEnvironment", 0, 0, 1, (swig_guile_proc) _wrap_RiMakeCubeFaceEnvironment_rest);
  scm_c_define_gsubr("RiMakeShadow", 2, 1, 0, (swig_guile_proc) _wrap_RiMakeShadow);
  scm_c_define_gsubr("RiMakeOcclusion", 3, 1, 0, (swig_guile_proc) _wrap_RiMakeOcclusion);
  scm_c_define_gsubr("RiErrorHandler", 1, 0, 0, (swig_guile_proc) _wrap_RiErrorHandler);
  scm_c_define_gsubr("RiErrorIgnore", 3, 0, 0, (swig_guile_proc) _wrap_RiErrorIgnore);
  scm_c_define_gsubr("RiErrorPrint", 3, 0, 0, (swig_guile_proc) _wrap_RiErrorPrint);
  scm_c_define_gsubr("RiErrorAbort", 3, 0, 0, (swig_guile_proc) _wrap_RiErrorAbort);
  scm_c_define_gsubr("RiReadArchive", 2, 1, 0, (swig_guile_proc) _wrap_RiReadArchive);
}

#ifdef __cplusplus
}
#endif
extern "C" {
/* Linkage: module */
static void SWIG_init_helper(void *data)
{
  SWIG_init();
  scm_c_export("tokenCast", "TrampolineRtFunc", "MakeSCMCallbackRtFunc", "TrampolineRtProgressFunc", "MakeSCMCallbackRtProgressFunc", "TrampolineRtProcSubdivFunc", "MakeSCMCallbackRtProcSubdivFunc", "TrampolineRtProcFreeFunc", "MakeSCMCallbackRtProcFreeFunc", "TrampolineRtFilterFunc", "MakeSCMCallbackRtFilterFunc", "AQSIS-COMPILER-H-INCLUDED", "AQSIS-SYSTEM-POSIX", "AQSIS-COMPILER-GCC", "SHARED-LIBRARY-SUFFIX", "RI-FALSE", "RI-TRUE", "RI-PI", "RI-PIO2", "RI-SHADER-EXTENSION", "RI-FRAMEBUFFER", "RI-FILE", "RI-RGB", "RI-RGBA", "RI-RGBZ", "RI-RGBAZ", "RI-A", "RI-Z", "RI-AZ", "RI-MERGE", "RI-ORIGIN", "RI-PERSPECTIVE", "RI-ORTHOGRAPHIC", "RI-HIDDEN", "RI-PAINT", "RI-CONSTANT", "RI-SMOOTH", "RI-FLATNESS", "RI-FOV", "RI-AMBIENTLIGHT", "RI-POINTLIGHT", "RI-DISTANTLIGHT", "RI-SPOTLIGHT", "RI-INTENSITY", "RI-LIGHTCOLOR", "RI-FROM", "RI-TO", "RI-CONEANGLE", "RI-CONEDELTAANGLE", "RI-BEAMDISTRIBUTION", "RI-MATTE", "RI-METAL", "RI-PLASTIC", "RI-SHINYMETAL", "RI-PAINTEDPLASTIC", "RI-KA", "RI-KD", "RI-KS", "RI-ROUGHNESS", "RI-KR", "RI-TEXTURENAME", "RI-SPECULARCOLOR", "RI-DEPTHCUE", "RI-FOG", "RI-BUMPY", "RI-MINDISTANCE", "RI-MAXDISTANCE", "RI-BACKGROUND", "RI-DISTANCE", "RI-AMPLITUDE", "RI-RASTER", "RI-SCREEN", "RI-CAMERA", "RI-WORLD", "RI-OBJECT", "RI-INSIDE", "RI-OUTSIDE", "RI-LH", "RI-RH", "RI-P", "RI-PZ", "RI-PW", "RI-N", "RI-NP", "RI-CS", "RI-OS", "RI-S", "RI-T", "RI-ST", "RI-BILINEAR", "RI-BICUBIC", "RI-LINEAR", "RI-CUBIC", "RI-PRIMITIVE", "RI-INTERSECTION", "RI-UNION", "RI-DIFFERENCE", "RI-WRAP", "RI-NOWRAP", "RI-PERIODIC", "RI-NONPERIODIC", "RI-CLAMP", "RI-BLACK", "RI-IGNORE", "RI-PRINT", "RI-ABORT", "RI-HANDLER", "RI-IDENTIFIER", "RI-NAME", "RI-COMMENT", "RI-STRUCTURE", "RI-VERBATIM", "RI-WIDTH", "RI-CONSTANTWIDTH", "RI-CURRENT", "RI-SHADER", "RI-EYE", "RI-NDC", "RiBezierBasis", "RiBSplineBasis", "RiCatmullRomBasis", "RiHermiteBasis", "RiPowerBasis", "RiLastError", "BasisFromName", "RiProgressHandler", "RiPreRenderFunction", "RiPreWorldFunction", "RiDeclare", "RiBegin", "RiEnd", "RiGetContext", "RiContext", "RiFrameBegin", "RiFrameEnd", "RiWorldBegin", "RiWorldEnd", "RiIfBegin", "RiElseIf", "RiElse", "RiIfEnd", "RiFormat", "RiFrameAspectRatio", "RiScreenWindow", "RiCropWindow", "RiProjection", "RiClipping", "RiClippingPlane", "RiDepthOfField", "RiShutter", "RiPixelVariance", "RiPixelSamples", "RiPixelFilter", "RiExposure", "RiImager", "RiQuantize", "RiDisplay", "RiGaussianFilter", "RiBoxFilter", "RiMitchellFilter", "RiTriangleFilter", "RiCatmullRomFilter", "RiSincFilter", "RiDiskFilter", "RiBesselFilter", "RiHider", "RiColorSamples", "RiRelativeDetail", "RiOption", "RiAttributeBegin", "RiAttributeEnd", "RiColor", "RiOpacity", "RiTextureCoordinates", "RiLightSource", "RiAreaLightSource", "RiIlluminate", "RiSurface", "RiDeformation", "RiDisplacement", "RiAtmosphere", "RiInterior", "RiExterior", "RiShaderLayer", "RiConnectShaderLayers", "RiShadingRate", "RiShadingInterpolation", "RiMatte", "RiBound", "RiDetail", "RiDetailRange", "RiGeometricApproximation", "RiOrientation", "RiReverseOrientation", "RiSides", "RiIdentity", "RiTransform", "RiConcatTransform", "RiPerspective", "RiTranslate", "RiRotate", "RiScale", "RiSkew", "RiCoordinateSystem", "RiCoordSysTransform", "RiTransformPoints", "RiTransformBegin", "RiTransformEnd", "RiResource", "RiResourceBegin", "RiResourceEnd", "RiAttribute", "RiPolygon", "RiGeneralPolygon", "RiPointsPolygons", "RiPointsGeneralPolygons", "RiBasis", "RiPatch", "RiPatchMesh", "RiNuPatch", "RiTrimCurve", "RiSubdivisionMesh", "RiSphere", "RiCone", "RiCylinder", "RiHyperboloid", "RiParaboloid", "RiDisk", "RiTorus", "RiPoints", "RiCurves", "RiBlobby", "RiProcedural", "RiProcFree", "RiProcDelayedReadArchive", "RiProcRunProgram", "RiProcDynamicLoad", "RiGeometry", "RiSolidBegin", "RiSolidEnd", "RiObjectBegin", "RiObjectEnd", "RiObjectInstance", "RiMotionBegin", "RiMotionEnd", "RiMakeTexture", "RiMakeBump", "RiMakeLatLongEnvironment", "RiMakeCubeFaceEnvironment", "RiMakeShadow", "RiMakeOcclusion", "RiErrorHandler", "RiErrorIgnore", "RiErrorPrint", "RiErrorAbort", "RiReadArchive", NULL);
}

SCM
scm_init_rman_rispec_module (void)
{
  scm_c_define_module("rman rispec-primitive",
    SWIG_init_helper, NULL);
  return SCM_UNSPECIFIED;
}

}

